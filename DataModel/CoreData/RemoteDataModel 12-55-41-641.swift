import Foundation
import CoreData
import MoonKit

func attribute(name: String, type: NSAttributeType, className: String, defaultValue: AnyObject? = nil, optional: Bool = true, validation: String? = nil) -> NSAttributeDescription {
  let attr = NSAttributeDescription()
  attr.name = name
  attr.attributeType = type
  attr.attributeValueClassName = className
  attr.defaultValue = defaultValue
  attr.optional = optional
  if let predicate = validation {
    attr.setValidationPredicates([âˆ€(validation!)], withValidationWarnings: [NSValidationStringPatternMatchingError])
  }
  return attr
}

func relationship(name: String, destination: NSEntityDescription, inverse: NSRelationshipDescription, deleteRule: NSDeleteRule = .NullifyDeleteRule, min: Int = 0, max: Int = 1, toMany: Bool = false, ordered: Bool = false) -> NSRelationshipDescription {
  let rel = NSRelationshipDescription()
  rel.name = name
  rel.destination = destination
  rel.inverse = inverse
  rel.deleteRule = deleteRule
  rel.minCount = min
  rel.maxCount = max
  rel.toMany = toMany
  rel.ordered = ordered
  return rel
}

uuid (required,string,NSString) {
      validation: "SELF MATCHES '(?:[A-F0-9]{8}(?:-[A-F0-9]{4}){3}-[A-Z0-9]{12})?'"
}

"Activity": [
  attribute("active", type: .BooleanAttributeType, className: NSNumber, defaultValue: 0, optional: false)
  attribute("autoGeneratedName", type: StringAttributeType, className: NSString)
  attribute("name", type: StringAttributeType, className: NSString)
  controllerCurrent {
        inverse: currentActivity
        delete rule: nullify
        destination: ActivityController
        min/max: 0/1
  }
  haltMacro {
        inverse: activityHalt
        delete rule: nullify
        destination: MacroCommand
        min/max: 1/1
  }
  launchMacro {
        inverse: activityLaunch
        delete rule: nullify
        destination: MacroCommand
        min/max: 1/1
  }
  remote {
        inverse: activity
        delete rule: nullify
        destination: Remote
        min/max: 1/1
  }
  commands (toMany) {
        inverse: activity
        delete rule: nullify
        destination: ActivityCommand
        min/max: 0/0
  }
]

"ActivityCommand": [
  activity {
        inverse: commands
        delete rule: nullify
        destination: Activity
        min/max: 1/1
  }
]

"ActivityController": [
  currentActivity {
        inverse: controllerCurrent
        delete rule: nullify
        destination: Activity
        min/max: 0/1
  }
  currentRemote {
        inverse: controllerCurrent
        delete rule: nullify
        destination: Remote
        min/max: 0/1
  }
  homeRemote {
        inverse: controllerHome
        delete rule: nullify
        destination: Remote
        min/max: 0/1
  }
  topToolbar {
        inverse: topToolbarForController
        delete rule: cascade
        destination: ButtonGroup
        min/max: 1/1
  }
]

"Button": [
  contentEdgeInsets (required,transformable,NSValue (UIEdgeInsets: {0, 0, 0, 0}))
  imageEdgeInsets (required,transformable,NSValue (UIEdgeInsets: {0, 0, 0, 0}))
  state (required,integer16,NSNumber (0))
  title (transformable,NSAttributedString)
  titleEdgeInsets (required,transformable,NSValue (UIEdgeInsets: {0, 0, 0, 0}))
  backgroundColors {
        inverse: button
        delete rule: cascade
        destination: ControlStateColorSet
        min/max: 0/1
  }
  command {
        inverse: button
        delete rule: cascade
        destination: Command
        min/max: 1/1
  }
  icon {
        inverse: buttonIcon
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  icons {
        inverse: buttonIcons
        delete rule: cascade
        destination: ControlStateImageSet
        min/max: 0/1
  }
  image {
        inverse: buttonImage
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  images {
        inverse: buttonImages
        delete rule: cascade
        destination: ControlStateImageSet
        min/max: 0/1
  }
  longPressCommand {
        inverse: longPressButton
        delete rule: cascade
        destination: Command
        min/max: 1/1
  }
  titles {
        inverse: button
        delete rule: cascade
        destination: ControlStateTitleSet
        min/max: 0/1
  }
]

"ButtonGroup": [
  autohide (required,boolean,NSNumber (0))
  labelConstraints (string,NSString (H:|[label] V:|[label]))
  panelAssignment (required,integer16,NSNumber (0))
  commandContainer {
        inverse: buttonGroup
        delete rule: cascade
        destination: CommandContainer
        min/max: 0/1
  }
  labelAttributes {
        inverse: storageForButtonGroupLabelAttributes
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
  topToolbarForController {
        inverse: topToolbar
        delete rule: nullify
        destination: ActivityController
        min/max: 1/1
  }
]

"Command": [
  autoGeneratedName (string,NSString)
  indicator (required,boolean,NSNumber (0)) {
        userInfo:         MSDefaultValueForContainingClassKey.Optional("ActivityCommand"): 1
  }
  name (string,NSString)
  button {
        inverse: command
        delete rule: nullify
        destination: Button
        min/max: 1/1
  }
  longPressButton {
        inverse: longPressCommand
        delete rule: nullify
        destination: Button
        min/max: 1/1
  }
  commandSets (toMany) {
        inverse: commands
        delete rule: nullify
        destination: CommandSet
        min/max: 0/0
  }
  macroCommands (toMany) {
        inverse: commands
        delete rule: nullify
        destination: MacroCommand
        min/max: 0/0
  }
]

"CommandContainer": [
  autoGeneratedName (string,NSString)
  containerIndex (required,transformable, MSDictionary (<MSDictionary:0x7fd5a2a77460> {

];))
  name (string,NSString)
  buttonGroup {
        inverse: commandContainer
        delete rule: nullify
        destination: ButtonGroup
        min/max: 0/1
  }
}

"CommandSet": [
  type (required,integer16,NSNumber (0)) {
        validation: 'SELF >= 0'
  }
  commandSetCollections (toMany) {
        inverse: commandSets
        delete rule: nullify
        destination: CommandSetCollection
        min/max: 0/0
  }
  commands (toMany) {
        inverse: commandSets
        delete rule: nullify
        destination: Command
        min/max: 0/0
  }
]

"CommandSetCollection": [
  commandSets (toMany,ordered) {
        inverse: commandSetCollections
        delete rule: nullify
        destination: CommandSet
        min/max: 0/0
  }
]

"ComponentDevice": [
  alwaysOn (required,boolean,NSNumber (0))
  autoGeneratedName (string,NSString)
  inputPowersOn (required,boolean,NSNumber (0))
  name (string,NSString)
  port (required,integer16,NSNumber (1)) {
        validation: 'SELF >= 1, SELF <= 3'
  }
  power (required,boolean,NSNumber (0))
  user (required,boolean,NSNumber (1))
  codeSet {
        inverse: devices
        delete rule: nullify
        destination: IRCodeSet
        min/max: 0/1
  }
  manufacturer {
        inverse: devices
        delete rule: nullify
        destination: Manufacturer
        min/max: 0/1
  }
  networkDevice {
        inverse: componentDevices
        delete rule: nullify
        destination: NetworkDevice
        min/max: 0/1
  }
  offCommand {
        inverse: offCommandForDevice
        delete rule: nullify
        destination: SendIRCommand
        min/max: 0/1
  }
  onCommand {
        inverse: onCommandForDevice
        delete rule: nullify
        destination: SendIRCommand
        min/max: 0/1
  }
  codes (toMany) {
        inverse: device
        delete rule: nullify
        destination: IRCode
        min/max: 0/0
  }
  inputs (toMany) {
        inverse: inputForDevice
        delete rule: nullify
        destination: IRCode
        min/max: 0/0
  }
  powerCommands (toMany) {
        inverse: device
        delete rule: nullify
        destination: PowerCommand
        min/max: 0/0
  }
  sendIRCommands (toMany) {
        inverse: componentDevice
        delete rule: nullify
        destination: SendIRCommand
        min/max: 0/0
  }
]

"Constraint": [
  constant (required,float,NSNumber (0))
  firstAttribute (required,integer16,NSNumber (0)) {
        validation: 'SELF >= 0, SELF <= 11'
  }
  identifier (string,NSString)
  multiplier (required,float,NSNumber (1))
  priority (required,float,NSNumber (1000)) {
        validation: 'SELF >= 0, SELF <= 1000'
  }
  relation (required,integer16,NSNumber (0)) {
        validation: 'SELF >= -1, SELF <= 1'
  }
  secondAttribute (required,integer16,NSNumber (0)) {
        validation: 'SELF >= 0, SELF <= 11'
  }
  tag (required,integer16,NSNumber (0))
  firstItem (required) {
        inverse: firstItemConstraints
        delete rule: nullify
        destination: RemoteElement
        min/max: 1/1
  }
  owner {
        inverse: constraints
        delete rule: nullify
        destination: RemoteElement
        min/max: 1/1
  }
  secondItem {
        inverse: secondItemConstraints
        delete rule: nullify
        destination: RemoteElement
        min/max: 0/1
  }
]

"ControlStateColorSet": [
  colorSetType (required,integer16,NSNumber (0))
  disabled (transformable, UIColor)
  highlighted (transformable, UIColor)
  highlightedDisabled (transformable, UIColor)
  highlightedSelected (transformable, UIColor)
  highlightedSelectedDisabled (transformable, UIColor)
  normal (transformable, UIColor)
  selected (transformable, UIColor)
  selectedDisabled (transformable, UIColor)
  button {
        inverse: backgroundColors
        delete rule: nullify
        destination: Button
        min/max: 1/1
  }
]

"ControlStateImageSet": [
  buttonIcons {
        inverse: icons
        delete rule: nullify
        destination: Button
        min/max: 0/1
  }
  buttonImages {
        inverse: images
        delete rule: nullify
        destination: Button
        min/max: 0/1
  }
  disabled {
        inverse: imageSetDisabled
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  highlighted {
        inverse: imageSetHighlighted
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  highlightedDisabled {
        inverse: imageSetHighlightedDisabled
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  highlightedSelected {
        inverse: imageSetHighlightedSelected
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  highlightedSelectedDisabled {
        inverse: imageSetSelectedHighlightedDisabled
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  normal {
        inverse: imageSetNormal
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  selected {
        inverse: imageSetSelected
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
  selectedDisabled {
        inverse: imageSetDisabledSelected
        delete rule: cascade
        destination: ImageView
        min/max: 0/1
  }
]

"ControlStateTitleSet": [
  button {
        inverse: titles
        delete rule: nullify
        destination: Button
        min/max: 1/1
  }
  disabled {
        inverse: storageForTitleSetDisabled
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
  highlighted {
        inverse: storageForTitleSetHighlighted
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
  highlightedDisabled {
        inverse: storageForTitleSetHighlightedDisabled
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
  highlightedSelected {
        inverse: storageForTitleSetHighlightedSelected
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
  highlightedSelectedDisabled {
        inverse: storageForTitleSetHighlightedSelectedDisabled
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
  normal {
        inverse: storageForTitleSetNormal
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
  selected {
        inverse: storageForTitleSetSelected
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
  selectedDisabled {
        inverse: storageForTitleSetSelectedDisabled
        delete rule: cascade
        destination: DictionaryStorage
        min/max: 0/1
  }
]

"DelayCommand": [
  duration (required,float,NSNumber (0.25)) {
        userInfo:         com.apple.syncservices.Syncable: NO
  }
]

"DictionaryStorage": [
  dictionary (required,transformable,NSDictionary ({
]))
  storageForButtonGroupLabelAttributes {
        inverse: labelAttributes
        delete rule: nullify
        destination: ButtonGroup
        min/max: 0/1
  }
  storageForPreset {
        inverse: storage
        delete rule: nullify
        destination: Preset
        min/max: 0/1
  }
  storageForTitleSetDisabled {
        inverse: disabled
        delete rule: nullify
        destination: ControlStateTitleSet
        min/max: 0/1
  }
  storageForTitleSetHighlighted {
        inverse: highlighted
        delete rule: nullify
        destination: ControlStateTitleSet
        min/max: 0/1
  }
  storageForTitleSetHighlightedDisabled {
        inverse: highlightedDisabled
        delete rule: nullify
        destination: ControlStateTitleSet
        min/max: 0/1
  }
  storageForTitleSetHighlightedSelected {
        inverse: highlightedSelected
        delete rule: nullify
        destination: ControlStateTitleSet
        min/max: 0/1
  }
  storageForTitleSetHighlightedSelectedDisabled {
        inverse: highlightedSelectedDisabled
        delete rule: nullify
        destination: ControlStateTitleSet
        min/max: 0/1
  }
  storageForTitleSetNormal {
        inverse: normal
        delete rule: nullify
        destination: ControlStateTitleSet
        min/max: 0/1
  }
  storageForTitleSetSelected {
        inverse: selected
        delete rule: nullify
        destination: ControlStateTitleSet
        min/max: 0/1
  }
  storageForTitleSetSelectedDisabled {
        inverse: selectedDisabled
        delete rule: nullify
        destination: ControlStateTitleSet
        min/max: 0/1
  }
}

"HTTPCommand": [
  url (required,transformable,NSURL (http://about:blank))
]

"IRCode": [
  userInfo: {
        categoryKey: codeSet
  }  autoGeneratedName (string,NSString)
  frequency (required,integer64,NSNumber (40000))
  name (string,NSString)
  offset (required,integer16,NSNumber (1)) {
        validation: 'SELF >= 1'
  }
  onOffPattern (string,NSString)
  prontoHex (string,NSString)
  repeatCount (required,integer16,NSNumber (1)) {
        validation: 'SELF >= 1, SELF <= 50'
  }
  setsDeviceInput (required,boolean,NSNumber (0))
  user (required,boolean,NSNumber (0))
  codeSet (required) {
        inverse: codes
        delete rule: nullify
        destination: IRCodeSet
        min/max: 0/1
  }
  device {
        inverse: codes
        delete rule: nullify
        destination: ComponentDevice
        min/max: 0/1
  }
  inputForDevice {
        inverse: inputs
        delete rule: nullify
        destination: ComponentDevice
        min/max: 0/1
  }
  sendCommands (toMany) {
        inverse: code
        delete rule: cascade
        destination: SendIRCommand
        min/max: 0/0
  }
]

"IRCodeSet": [
  autoGeneratedName (string,NSString)
  name (string,NSString)
  user (required,boolean,NSNumber (0))
  manufacturer (required) {
        inverse: codeSets
        delete rule: nullify
        destination: Manufacturer
        min/max: 0/1
  }
  codes (required,toMany) {
        inverse: codeSet
        delete rule: nullify
        destination: IRCode
        min/max: 0/0
  }
  devices (required,toMany) {
        inverse: codeSet
        delete rule: nullify
        destination: ComponentDevice
        min/max: 0/0
  }
]

"ISYDevice": [
  baseURL (string,NSString)
  deviceType (string,NSString)
  friendlyName (string,NSString)
  manufacturer (string,NSString)
  manufacturerURL (string,NSString)
  modelDescription (string,NSString)
  modelName (string,NSString)
  modelNumber (string,NSString)
  groups (toMany) {
        inverse: device
        delete rule: nullify
        destination: ISYDeviceGroup
        min/max: 0/0
  }
  nodes (toMany) {
        inverse: device
        delete rule: cascade
        destination: ISYDeviceNode
        min/max: 0/0
  }
]

"ISYDeviceGroup": [
  address (required,string,NSString)
  autoGeneratedName (string,NSString)
  family (required,integer16,NSNumber (0))
  flag (required,integer16,NSNumber (0))
  name (string,NSString)
  device {
        inverse: groups
        delete rule: nullify
        destination: ISYDevice
        min/max: 0/1
  }
  members (toMany) {
        inverse: groups
        delete rule: nullify
        destination: ISYDeviceNode
        min/max: 0/0
  }
]

"ISYDeviceNode": [
  address (required,string,NSString)
  autoGeneratedName (string,NSString)
  enabled (required,boolean,NSNumber)
  flag (required,integer16,NSNumber (0))
  name (string,NSString)
  pnode (required,string,NSString)
  propertyFormatted (required,string,NSString)
  propertyID (required,string,NSString)
  propertyUOM (required,string,NSString)
  propertyValue (required,integer16,NSNumber (0))
  type (required,string,NSString)
  device {
        inverse: nodes
        delete rule: nullify
        destination: ISYDevice
        min/max: 0/1
  }
  groups (toMany) {
        inverse: members
        delete rule: nullify
        destination: ISYDeviceGroup
        min/max: 0/0
  }
]

"ITachDevice": [
  configURL (string,NSString)
  make (string,NSString)
  model (string,NSString)
  pcbPN (string,NSString)
  pkgLevel (string,NSString)
  revision (string,NSString)
  sdkClass (string,NSString)
  status (string,NSString)
]

"Image": [
  userInfo: {
        categoryKey: imageCategory
  }  assetName (required,string,NSString)
  autoGeneratedName (string,NSString)
  leftCap (required,integer32,NSNumber (0))
  name (string,NSString)
  size (transformable,NSValue (NSSize: {0, 0}))
  topCap (required,integer32,NSNumber (0))
  user (required,boolean,NSNumber (0))
  imageCategory (required) {
        inverse: images
        delete rule: nullify
        destination: ImageCategory
        min/max: 0/1
  }
  views (toMany) {
        inverse: image
        delete rule: cascade
        destination: ImageView
        min/max: 0/0
  }
]

"ImageCategory": [
  autoGeneratedName (string,NSString)
  name (string,NSString)
  user (required,boolean,NSNumber (0))
  parentCategory {
        inverse: childCategories
        delete rule: nullify
        destination: ImageCategory
        min/max: 0/1
  }
  childCategories (required,toMany) {
        inverse: parentCategory
        delete rule: nullify
        destination: ImageCategory
        min/max: 0/0
  }
  images (required,toMany) {
        inverse: imageCategory
        delete rule: nullify
        destination: Image
        min/max: 0/0
  }
]

"ImageView": [
  color (transformable, UIColor)
  imagePath (string,NSString)
  buttonIcon {
        inverse: icon
        delete rule: nullify
        destination: Button
        min/max: 0/1
  }
  buttonImage {
        inverse: image
        delete rule: nullify
        destination: Button
        min/max: 0/1
  }
  image (required) {
        inverse: views
        delete rule: nullify
        destination: Image
        min/max: 0/1
  }
  imageSetDisabled {
        inverse: disabled
        delete rule: nullify
        destination: ControlStateImageSet
        min/max: 0/1
  }
  imageSetDisabledSelected {
        inverse: selectedDisabled
        delete rule: nullify
        destination: ControlStateImageSet
        min/max: 0/1
  }
  imageSetHighlighted {
        inverse: highlighted
        delete rule: nullify
        destination: ControlStateImageSet
        min/max: 0/1
  }
  imageSetHighlightedDisabled {
        inverse: highlightedDisabled
        delete rule: nullify
        destination: ControlStateImageSet
        min/max: 0/1
  }
  imageSetHighlightedSelected {
        inverse: highlightedSelected
        delete rule: nullify
        destination: ControlStateImageSet
        min/max: 0/1
  }
  imageSetNormal {
        inverse: normal
        delete rule: nullify
        destination: ControlStateImageSet
        min/max: 0/1
  }
  imageSetSelected {
        inverse: selected
        delete rule: nullify
        destination: ControlStateImageSet
        min/max: 0/1
  }
  imageSetSelectedHighlightedDisabled {
        inverse: highlightedSelectedDisabled
        delete rule: nullify
        destination: ControlStateImageSet
        min/max: 0/1
  }
  remoteElements (toMany) {
        inverse: backgroundImage
        delete rule: nullify
        destination: RemoteElement
        min/max: 0/0
  }
]

"MacroCommand": [
  activityHalt {
        inverse: haltMacro
        delete rule: nullify
        destination: Activity
        min/max: 1/1
  }
  activityLaunch {
        inverse: launchMacro
        delete rule: nullify
        destination: Activity
        min/max: 1/1
  }
  commands (toMany,ordered) {
        inverse: macroCommands
        delete rule: nullify
        destination: Command
        min/max: 0/0
  }
]

"Manufacturer": [
  autoGeneratedName (string,NSString)
  name (string,NSString)
  user (required,boolean,NSNumber (0))
  codeSets (toMany) {
        inverse: manufacturer
        delete rule: nullify
        destination: IRCodeSet
        min/max: 0/0
  }
  devices (required,toMany) {
        inverse: manufacturer
        delete rule: nullify
        destination: ComponentDevice
        min/max: 0/0
  }
]

"NetworkDevice": [
  autoGeneratedName (string,NSString)
  name (string,NSString)
  uniqueIdentifier (string,NSString)
  user (required,boolean,NSNumber (1))
  componentDevices (toMany) {
        inverse: networkDevice
        delete rule: nullify
        destination: ComponentDevice
        min/max: 0/0
  }
]

"PowerCommand": [
  state (required,boolean,NSNumber (0))
  device (required) {
        inverse: powerCommands
        delete rule: nullify
        destination: ComponentDevice
        min/max: 1/1
  }
]

"Preset": [
  userInfo: {
        categoryKey: presetCategory
  }  autoGeneratedName (string,NSString)
  name (string,NSString)
  user (required,boolean,NSNumber (1))
  parentPreset {
        inverse: subelements
        delete rule: nullify
        destination: Preset
        min/max: 0/1
  }
  presetCategory {
        inverse: presets
        delete rule: nullify
        destination: PresetCategory
        min/max: 0/1
  }
  storage (required) {
        inverse: storageForPreset
        delete rule: nullify
        destination: DictionaryStorage
        min/max: 0/1
  }
  subelements (toMany,ordered) {
        inverse: parentPreset
        delete rule: cascade
        destination: Preset
        min/max: 0/0
  }
]

"PresetCategory": [
  autoGeneratedName (string,NSString)
  name (required,string,NSString)
  user (required,boolean,NSNumber (0))
  parentCategory {
        inverse: childCategories
        delete rule: nullify
        destination: PresetCategory
        min/max: 0/1
  }
  childCategories (required,toMany) {
        inverse: parentCategory
        delete rule: nullify
        destination: PresetCategory
        min/max: 0/0
  }
  presets (required,toMany) {
        inverse: presetCategory
        delete rule: nullify
        destination: Preset
        min/max: 0/0
  }
]

"Remote": [
  panels (required,transformable,NSDictionary ({
]))
  topBarHidden (required,boolean,NSNumber (0))
  activity {
        inverse: remote
        delete rule: nullify
        destination: Activity
        min/max: 1/1
  }
  controllerCurrent {
        inverse: currentRemote
        delete rule: nullify
        destination: ActivityController
        min/max: 0/1
  }
  controllerHome {
        inverse: homeRemote
        delete rule: nullify
        destination: ActivityController
        min/max: 0/1
  }
}

"RemoteElement": [
  autoGeneratedName (string,NSString)
  backgroundColor (transformable, UIColor (UIDeviceWhiteColorSpace 0 0))
  backgroundImageAlpha (required,float,NSNumber (1)) {
        validation: 'SELF >= 0, SELF <= 1'
  }
  configurations (required,transformable,NSDictionary ({
]))
  key (string,NSString)
  name (string,NSString)
  role (required,integer16,NSNumber (0)) {
        validation: 'SELF >= 0'
  }
  shape (required,integer16,NSNumber (0))
  style (required,integer16,NSNumber (0))
  tag (required,integer16,NSNumber (0))
  backgroundImage {
        inverse: remoteElements
        delete rule: nullify
        destination: ImageView
        min/max: 1/1
  }
  parentElement {
        inverse: subelements
        delete rule: nullify
        destination: RemoteElement
        min/max: 1/1
  }
  constraints (toMany) {
        inverse: owner
        delete rule: cascade
        destination: Constraint
        min/max: 0/0
  }
  firstItemConstraints (toMany) {
        inverse: firstItem
        delete rule: cascade
        destination: Constraint
        min/max: 0/0
  }
  secondItemConstraints (toMany) {
        inverse: secondItem
        delete rule: cascade
        destination: Constraint
        min/max: 0/0
  }
  subelements (toMany,ordered) {
        inverse: parentElement
        delete rule: cascade
        destination: RemoteElement
        min/max: 0/0
  }
}

"SendIRCommand": [
  portOverride (required,integer16,NSNumber (0)) {
        validation: 'SELF <= 3'
  }
  code (required) {
        inverse: sendCommands
        delete rule: nullify
        destination: IRCode
        min/max: 1/1
  }
  componentDevice {
        inverse: sendIRCommands
        delete rule: nullify
        destination: ComponentDevice
        min/max: 0/1
  }
  offCommandForDevice {
        inverse: offCommand
        delete rule: nullify
        destination: ComponentDevice
        min/max: 0/1
  }
  onCommandForDevice {
        inverse: onCommand
        delete rule: nullify
        destination: ComponentDevice
        min/max: 0/1
  }
]

"SwitchCommand": [
  target (required,string,NSString (REDefaultConfiguration))
  type (required,integer16,NSNumber (0))
]

"SystemCommand": [
  type (required,integer16,NSNumber (0))
]
