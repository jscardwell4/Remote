//
//  ITachDevice.swift
//  Remote
//
//  Created by Jason Cardwell on 10/1/14.
//  Copyright (c) 2014 Moondeer Studios. All rights reserved.
//

import Foundation
import CoreData
import MoonKit

@objc(ITachDevice)
public class ITachDevice: NetworkDevice {

  public var configURL: String! {
    get {
      willAccessValueForKey("configURL")
      let url = primitiveValueForKey("configURL") as? String
      didAccessValueForKey("configURL")
      return url ?? ""
    }
    set {
      willChangeValueForKey("configURL")
      setPrimitiveValue(newValue.hasPrefix("http://") ? newValue[7..<newValue.length] : newValue, forKey: "configURL")
      didChangeValueForKey("configURL")
    }
  }

  private var generatedName: String? {
    var n = ""
      if model != nil && !model.isEmpty { n += model }
      if make != nil && !make.isEmpty {
        if !n.isEmpty { n += "-" }
        n += make
      }
      return n.isEmpty ? nil : n
  }

  public var make: String! {
    get {
      willAccessValueForKey("make")
      let m = primitiveValueForKey("make") as? String
      didAccessValueForKey("make")
      return m ?? ""
    }
    set {
      willChangeValueForKey("make")
      setPrimitiveValue(newValue, forKey: "make")
      didChangeValueForKey("make")
      if isNameAutoGenerated { if let n = generatedName { setPrimitiveValue(n, forKey: "name") } }
    }
  }

  public var model: String! {
    get {
      willAccessValueForKey("model")
      let m = primitiveValueForKey("model") as? String
      didAccessValueForKey("model")
      return m ?? ""
    }
    set {
      willChangeValueForKey("model")
      setPrimitiveValue(newValue, forKey: "model")
      didChangeValueForKey("model")
      if isNameAutoGenerated { if let n = generatedName { setPrimitiveValue(n, forKey: "name") } }
    }
  }

  @NSManaged public var pcbPN: String
  @NSManaged public var pkgLevel: String
  @NSManaged public var revision: String
  @NSManaged public var sdkClass: String
  @NSManaged public var status: String

  // MARK: - BeaconProperty enumeration

  enum BeaconProperty: String {
    case ConfigURL        = "Config-URL"
    case Make             = "Make"
    case Model            = "Model"
    case PCB              = "PCB_PN"
    case SDK              = "SDKClass"
    case Status           = "Status"
    case Revision         = "Revision"
    case Pkg              = "Pkg_Level"
    case UniqueIdentifier = "UUID"

    var deviceProperty: String {
      switch self {
      case .ConfigURL:        return "configURL"
      case .Make:             return "make"
      case .Model:            return "model"
      case .PCB:              return "pcbPN"
      case .SDK:              return "sdkClass"
      case .Status:           return "status"
      case .Revision:         return "revision"
      case .Pkg:              return "pkgLevel"
      case .UniqueIdentifier: return "uniqueIdentifier"
      }
    }
  }

  /**
  initWithBeacon:context:

  :param: beacon String
  :param: context NSManagedObjectContext
  */
  public convenience init?(beacon: String, context: NSManagedObjectContext) {
    let entries = beacon.matchingSubstringsForRegEx(~/"(?<=<-)(.*?)(?=>)")
    var attributes: [String:String] = [:]
    apply(entries) {
      let components = "=".split($0)
      if components.count == 2, let prop = BeaconProperty(rawValue: components[0]) {
        attributes[prop.deviceProperty] = components[1]
      }
    }
    if let uniqueIdentifier = attributes[BeaconProperty.UniqueIdentifier.deviceProperty]
      where !NetworkDevice.objectExistsInContext(context, withValue: uniqueIdentifier, forAttribute: "uniqueIdentifier")
    {
      self.init(context: context)
      setValuesForKeysWithDictionary(attributes)
    } else {
      self.init(context: nil)
      return nil
    }
  }

  /**
  updateWithBeacon:

  :param: beacon String
  */
  public func updateWithBeacon(beacon: String) {
    let entries = beacon.matchingSubstringsForRegEx(~/"(?<=<-)(.*?)(?=>)")
    var attributes: [String:String] = [:]
    apply(entries) {
      let components = "=".split($0)
      if components.count == 2, let prop = BeaconProperty(rawValue: components[0]) {
        attributes[prop.deviceProperty] = components[1]
      }
    }
    if let uniqueIdentifier = attributes[BeaconProperty.UniqueIdentifier.deviceProperty]
      where self.uniqueIdentifier == nil || self.uniqueIdentifier == uniqueIdentifier
    {
      setValuesForKeysWithDictionary(attributes)
      var error: NSError?
      managedObjectContext?.save(&error)
      MSHandleError(error, message: "failed to update from beacon '\(beacon)'")
    }
  }

  /**
  updateWithData:

  :param: data ObjectJSONValue
  */
  override public func updateWithData(data: ObjectJSONValue) {
    super.updateWithData(data)
    if let pcbPN     = String(data["pcbPN"]) { self.pcbPN = pcbPN }
    if let pkgLevel  = String(data["pkgLevel"]) { self.pkgLevel = pkgLevel }
    if let sdkClass  = String(data["sdkClass"]) { self.sdkClass = sdkClass }
    if let make      = String(data["make"]) { self.make = make }
    if let model     = String(data["model"]) { self.model = model }
    if let status    = String(data["status"]) { self.status = status }
    if let configURL = String(data["configURL"]) { self.configURL = configURL }
    if let revision  = String(data["revision"]) { self.revision = revision }
  }

  override public var jsonValue: JSONValue {
    var obj = ObjectJSONValue(super.jsonValue)!
    obj["type"] = "itach"
    obj["pcbPN"] = pcbPN.jsonValue
    obj["pkgLevel"] = pkgLevel.jsonValue
    obj["sdkClass"] = sdkClass.jsonValue
    obj["make"] = make.jsonValue
    obj["model"] = model.jsonValue
    obj["status"] = status.jsonValue
    obj["configURL"] = configURL.jsonValue
    obj["revision"] = revision.jsonValue
    return obj.jsonValue
  }

}
