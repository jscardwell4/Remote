//
//  ITachDevice.swift
//  Remote
//
//  Created by Jason Cardwell on 10/1/14.
//  Copyright (c) 2014 Moondeer Studios. All rights reserved.
//

import Foundation
import CoreData
import MoonKit

@objc(ITachDevice)
public class ITachDevice: NetworkDevice {

  @NSManaged var primitiveConfigURL: String!
  public var configURL: String! {
    get {
      willAccessValueForKey("configURL")
      let url = primitiveConfigURL
      didAccessValueForKey("configURL")
      return url
    }
    set {
      willChangeValueForKey("configURL")
      primitiveConfigURL = newValue.hasPrefix("http://") ? newValue[7..<newValue.length] : newValue
      didChangeValueForKey("configURL")
    }
  }

  private var generatedName: String? {
    var n = ""
      if model != nil && !model.isEmpty { n += model }
      if make != nil && !make.isEmpty {
        if !n.isEmpty { n += "-" }
        n += make
      }
      return n.isEmpty ? nil : n
  }

  @NSManaged var primitiveMake: String!
  public var make: String! {
    get {
      willAccessValueForKey("make")
      let m = primitiveMake
      didAccessValueForKey("make")
      return m
    }
    set {
      willChangeValueForKey("make")
      primitiveMake = newValue
      didChangeValueForKey("make")
      if isNameAutoGenerated { if let n = generatedName { setPrimitiveValue(n, forKey: "name") } }
    }
  }

  @NSManaged var primitiveModel: String!
  public var model: String! {
    get {
      willAccessValueForKey("model")
      let m = primitiveModel
      didAccessValueForKey("model")
      return m
    }
    set {
      willChangeValueForKey("model")
      primitiveModel = newValue
      didChangeValueForKey("model")
      if isNameAutoGenerated { if let n = generatedName { setPrimitiveValue(n, forKey: "name") } }
    }
  }

  @NSManaged public var pcbPN: String
  @NSManaged public var pkgLevel: String
  @NSManaged public var revision: String
  @NSManaged public var sdkClass: String
  @NSManaged public var status: String

  /**
  updateWithData:

  :param: data ObjectJSONValue
  */
  override public func updateWithData(data: ObjectJSONValue) {
    super.updateWithData(data)
    if let pcbPN     = String(data["pcb-pn"]) { self.pcbPN = pcbPN }
    if let pkgLevel  = String(data["pkg-level"]) { self.pkgLevel = pkgLevel }
    if let sdkClass  = String(data["sdk-class"]) { self.sdkClass = sdkClass }
    if let make      = String(data["make"]) { self.make = make }
    if let model     = String(data["model"]) { self.model = model }
    if let status    = String(data["status"]) { self.status = status }
    if let configURL = String(data["config-url"]) { self.configURL = configURL }
    if let revision  = String(data["revision"]) { self.revision = revision }
  }

  /**
  detailController

  :returns: UIViewController
  */
//  func detailController() -> UIViewController { return ITachDeviceDetailController(model: self) }


  override public var jsonValue: JSONValue {
    var dict = super.jsonValue.value as! JSONValue.ObjectValue
    appendValueForKey("pcbPN", toDictionary: &dict)
    appendValueForKey("pkgLevel", toDictionary: &dict)
    appendValueForKey("sdkClass", toDictionary: &dict)
    appendValueForKey("make", toDictionary: &dict)
    appendValueForKey("model", toDictionary: &dict)
    appendValueForKey("status", toDictionary: &dict)
    appendValueForKey("configURL", toDictionary: &dict)
    appendValueForKey("revision", toDictionary: &dict)
    return .Object(dict)
  }

}
