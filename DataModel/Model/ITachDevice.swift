//
//  ITachDevice.swift
//  Remote
//
//  Created by Jason Cardwell on 10/1/14.
//  Copyright (c) 2014 Moondeer Studios. All rights reserved.
//

import Foundation
import CoreData
import MoonKit

@objc(ITachDevice)
public class ITachDevice: NetworkDevice {

  public var configURL: String! {
    get {
      willAccessValueForKey("configURL")
      let url = primitiveValueForKey("configURL") as? String
      didAccessValueForKey("configURL")
      return url ?? ""
    }
    set {
      willChangeValueForKey("configURL")
      setPrimitiveValue(newValue.hasPrefix("http://") ? newValue[7..<newValue.length] : newValue, forKey: "configURL")
      didChangeValueForKey("configURL")
    }
  }

  private var generatedName: String? {
    var n = ""
      if model != nil && !model.isEmpty { n += model }
      if make != nil && !make.isEmpty {
        if !n.isEmpty { n += "-" }
        n += make
      }
      return n.isEmpty ? nil : n
  }

  public var make: String! {
    get {
      willAccessValueForKey("make")
      let m = primitiveValueForKey("make") as? String
      didAccessValueForKey("make")
      return m ?? ""
    }
    set {
      willChangeValueForKey("make")
      setPrimitiveValue(newValue, forKey: "make")
      didChangeValueForKey("make")
      if isNameAutoGenerated { if let n = generatedName { setPrimitiveValue(n, forKey: "name") } }
    }
  }

  public var model: String! {
    get {
      willAccessValueForKey("model")
      let m = primitiveValueForKey("model") as? String
      didAccessValueForKey("model")
      return m ?? ""
    }
    set {
      willChangeValueForKey("model")
      setPrimitiveValue(newValue, forKey: "model")
      didChangeValueForKey("model")
      if isNameAutoGenerated { if let n = generatedName { setPrimitiveValue(n, forKey: "name") } }
    }
  }

  @NSManaged public var pcbPN: String
  @NSManaged public var pkgLevel: String
  @NSManaged public var revision: String
  @NSManaged public var sdkClass: String
  @NSManaged public var status: String

  // MARK: - BeaconProperty enumeration

  enum BeaconProperty: RawRepresentable {
    case ConfigURL (String)
    case Make (String)
    case Model (String)
    case PCB (String)
    case SDK (String)
    case Status (String)
    case Revision (String)
    case Pkg (String)
    case UniqueIdentifier (String)

    init?(rawValue: String) {
      let components = "=".split(rawValue)
      guard case let (property?, value?) = (components.first, components.last) where property != value else { return nil}
      switch property {
        case "Config-URL": self = ConfigURL(value)
        case "Make":       self = Make(value)
        case "Model":      self = Model(value)
        case "PCB_PN":     self = PCB(value)
        case "SDKClass":   self = SDK(value)
        case "Status":     self = Status(value)
        case "Revision":   self = Revision(value)
        case "Pkg_Level":  self = Pkg(value)
        case "UUID":       self = UniqueIdentifier(value)
        default:           return nil
      }
    }

    var rawValue: String {
      switch self {
        case .ConfigURL (let value):        return "Config-URL=\(value)"
        case .Make (let value):             return "Make=\(value)"
        case .Model (let value):            return "Model=\(value)"
        case .PCB (let value):              return "PCB_PN=\(value)"
        case .SDK (let value):              return "SDKClass=\(value)"
        case .Status (let value):           return "Status=\(value)"
        case .Revision (let value):         return "Revision=\(value)"
        case .Pkg (let value):              return "Pkg_Level=\(value)"
        case .UniqueIdentifier (let value): return "UUID=\(value)"
      }
    }

    var value: String {
     switch self {
        case .ConfigURL (let value):        return value
        case .Make (let value):             return value
        case .Model (let value):            return value
        case .PCB (let value):              return value
        case .SDK (let value):              return value
        case .Status (let value):           return value
        case .Revision (let value):         return value
        case .Pkg (let value):              return value
        case .UniqueIdentifier (let value): return value
      }
   }
    
    var deviceProperty: String {
      switch self {
        case .ConfigURL:        return "configURL"
        case .Make:             return "make"
        case .Model:            return "model"
        case .PCB:              return "pcbPN"
        case .SDK:              return "sdkClass"
        case .Status:           return "status"
        case .Revision:         return "revision"
        case .Pkg:              return "pkgLevel"
        case .UniqueIdentifier: return "uniqueIdentifier"
      }
    }
  }

  override public init(context: NSManagedObjectContext?) {
    super.init(context: context)
  }

  override public var summaryItems: OrderedDictionary<String, String> {
    var items = super.summaryItems
    items["Config URL"] = configURL
    items["Make"] = make
    items["Model"] = model
    items["PCB-PN"] = pcbPN
    items["SDK Class"] = sdkClass
    items["Revision"] = revision
    items["PKG Level"] = pkgLevel
    items["Status"] = status
    return items
  }

  /**
  initWithBeacon:context:

  - parameter beacon: String
  - parameter context: NSManagedObjectContext
  */
  public init?(beacon: String, context: NSManagedObjectContext) {
    let properties = (~/"(?<=<-)(.*?)(?=>)").match(beacon).flatMap { BeaconProperty(rawValue: $0.string) }
    let index = Dictionary(properties.map { ($0.deviceProperty, $0.value) })
    guard let uniqueIdentifier = index["uniqueIdentifier"]
      where !NetworkDevice.objectExistsInContext(context, withValue: uniqueIdentifier, forAttribute: "uniqueIdentifier")
    else
    {
      super.init(context: nil)
      return nil
    }

    super.init(context: context)
    setValuesForKeysWithDictionary(index)
  }

  required public init?(data: ObjectJSONValue, context: NSManagedObjectContext) {
    super.init(data: data, context: context)
  }

  /**
  deviceFromBeacon:context:

  - parameter beacon: String
  - parameter context: NSManagedObjectContext

  - returns: ITachDevice?
  */
  public class func deviceFromBeacon(beacon: String, context: NSManagedObjectContext) -> ITachDevice? {
    if let id = (~/"UUID=([a-zA-Z_0-9]+)").firstMatch(beacon)?.captures[1]?.string,
                device = objectWithValue(id, forAttribute: "uniqueIdentifier", context: context)
    {
      device.updateWithBeacon(beacon)
      return device
    } else if let device = ITachDevice(beacon: beacon, context: context) {
      return device
    } else {
      return nil
    }
  }

  /**
  updateWithBeacon:

  - parameter beacon: String
  */
  public func updateWithBeacon(beacon: String) {
    let properties = (~/"(?<=<-)(.*?)(?=>)").match(beacon).flatMap { BeaconProperty(rawValue: $0.string) }
    let index = Dictionary(properties.map { ($0.deviceProperty, $0.value) })

    guard let id = index["uniqueIdentifier"] where uniqueIdentifier == nil || uniqueIdentifier == id,
          let moc = managedObjectContext else { return }

    do {
      try DataManager.saveContext(moc, withBlock: { _ in self.setValuesForKeysWithDictionary(index) }, options: [.Propagating])
    } catch {
      MSHandleError(error as NSError, message: "failed to update from beacon '\(beacon)'")
    }
  }

  /**
  updateWithData:

  - parameter data: ObjectJSONValue
  */
  override public func updateWithData(data: ObjectJSONValue) {
    super.updateWithData(data)
    if let pcbPN     = String(data["pcbPN"]) { self.pcbPN = pcbPN }
    if let pkgLevel  = String(data["pkgLevel"]) { self.pkgLevel = pkgLevel }
    if let sdkClass  = String(data["sdkClass"]) { self.sdkClass = sdkClass }
    if let make      = String(data["make"]) { self.make = make }
    if let model     = String(data["model"]) { self.model = model }
    if let status    = String(data["status"]) { self.status = status }
    if let configURL = String(data["configURL"]) { self.configURL = configURL }
    if let revision  = String(data["revision"]) { self.revision = revision }
  }

  override public var jsonValue: JSONValue {
    var obj = ObjectJSONValue(super.jsonValue)!
    obj["type"] = "itach"
    obj["pcbPN"] = pcbPN.jsonValue
    obj["pkgLevel"] = pkgLevel.jsonValue
    obj["sdkClass"] = sdkClass.jsonValue
    obj["make"] = make.jsonValue
    obj["model"] = model.jsonValue
    obj["status"] = status.jsonValue
    obj["configURL"] = configURL.jsonValue
    obj["revision"] = revision.jsonValue
    return obj.jsonValue
  }

}
