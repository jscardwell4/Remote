//
//  DrawingKit.swift
//  MoonKit
//
//  Created by Moondeer on 12/6/14.
//  Copyright (c) 2014 Moondeer Studios. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class DrawingKit : NSObject {

    //// Drawing Methods

    public class func drawNoImage(#frame: CGRect, color: UIColor) {


        //// Subframes
        let group: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.00000 + 0.5), frame.minY + floor(frame.height * 0.00000 + 0.5), floor(frame.width * 1.00000 + 0.5) - floor(frame.width * 0.00000 + 0.5), floor(frame.height * 1.00000 + 0.5) - floor(frame.height * 0.00000 + 0.5))


        //// Group
        //// Photo Drawing
        var photoPath = UIBezierPath()
        photoPath.moveToPoint(CGPointMake(group.minX + 0.72081 * group.width, group.minY + 0.30870 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.67174 * group.width, group.minY + 0.35652 * group.height), controlPoint1: CGPointMake(group.minX + 0.69371 * group.width, group.minY + 0.30870 * group.height), controlPoint2: CGPointMake(group.minX + 0.67174 * group.width, group.minY + 0.33011 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.72081 * group.width, group.minY + 0.40435 * group.height), controlPoint1: CGPointMake(group.minX + 0.67174 * group.width, group.minY + 0.38293 * group.height), controlPoint2: CGPointMake(group.minX + 0.69371 * group.width, group.minY + 0.40435 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.76988 * group.width, group.minY + 0.35652 * group.height), controlPoint1: CGPointMake(group.minX + 0.74791 * group.width, group.minY + 0.40435 * group.height), controlPoint2: CGPointMake(group.minX + 0.76988 * group.width, group.minY + 0.38293 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.72081 * group.width, group.minY + 0.30870 * group.height), controlPoint1: CGPointMake(group.minX + 0.76988 * group.width, group.minY + 0.33011 * group.height), controlPoint2: CGPointMake(group.minX + 0.74791 * group.width, group.minY + 0.30870 * group.height))
        photoPath.closePath()
        photoPath.moveToPoint(CGPointMake(group.minX + 0.41213 * group.width, group.minY + 0.45234 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.40461 * group.width, group.minY + 0.45691 * group.height), controlPoint1: CGPointMake(group.minX + 0.40906 * group.width, group.minY + 0.45287 * group.height), controlPoint2: CGPointMake(group.minX + 0.40646 * group.width, group.minY + 0.45459 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.23271 * group.width, group.minY + 0.67199 * group.height), controlPoint1: CGPointMake(group.minX + 0.40445 * group.width, group.minY + 0.45678 * group.height), controlPoint2: CGPointMake(group.minX + 0.23271 * group.width, group.minY + 0.67199 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.23012 * group.width, group.minY + 0.67935 * group.height), controlPoint1: CGPointMake(group.minX + 0.23125 * group.width, group.minY + 0.67415 * group.height), controlPoint2: CGPointMake(group.minX + 0.23012 * group.width, group.minY + 0.67659 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.24239 * group.width, group.minY + 0.69130 * group.height), controlPoint1: CGPointMake(group.minX + 0.23012 * group.width, group.minY + 0.68596 * group.height), controlPoint2: CGPointMake(group.minX + 0.23561 * group.width, group.minY + 0.69130 * group.height))
        photoPath.addLineToPoint(CGPointMake(group.minX + 0.65548 * group.width, group.minY + 0.69130 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.72854 * group.width, group.minY + 0.76304 * group.height), controlPoint1: CGPointMake(group.minX + 0.68274 * group.width, group.minY + 0.71807 * group.height), controlPoint2: CGPointMake(group.minX + 0.70753 * group.width, group.minY + 0.74241 * group.height))
        photoPath.addLineToPoint(CGPointMake(group.minX + 0.18106 * group.width, group.minY + 0.76304 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.15652 * group.width, group.minY + 0.73913 * group.height), controlPoint1: CGPointMake(group.minX + 0.16751 * group.width, group.minY + 0.76304 * group.height), controlPoint2: CGPointMake(group.minX + 0.15652 * group.width, group.minY + 0.75233 * group.height))
        photoPath.addLineToPoint(CGPointMake(group.minX + 0.15652 * group.width, group.minY + 0.26087 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.18106 * group.width, group.minY + 0.23696 * group.height), controlPoint1: CGPointMake(group.minX + 0.15652 * group.width, group.minY + 0.24767 * group.height), controlPoint2: CGPointMake(group.minX + 0.16751 * group.width, group.minY + 0.23696 * group.height))
        photoPath.addLineToPoint(CGPointMake(group.minX + 0.19279 * group.width, group.minY + 0.23696 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.41213 * group.width, group.minY + 0.45234 * group.height), controlPoint1: CGPointMake(group.minX + 0.23586 * group.width, group.minY + 0.27925 * group.height), controlPoint2: CGPointMake(group.minX + 0.31996 * group.width, group.minY + 0.36183 * group.height))
        photoPath.closePath()
        photoPath.moveToPoint(CGPointMake(group.minX + 0.84348 * group.width, group.minY + 0.26087 * group.height))
        photoPath.addLineToPoint(CGPointMake(group.minX + 0.84348 * group.width, group.minY + 0.73913 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.81894 * group.width, group.minY + 0.76304 * group.height), controlPoint1: CGPointMake(group.minX + 0.84348 * group.width, group.minY + 0.75233 * group.height), controlPoint2: CGPointMake(group.minX + 0.83249 * group.width, group.minY + 0.76304 * group.height))
        photoPath.addLineToPoint(CGPointMake(group.minX + 0.80913 * group.width, group.minY + 0.76304 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.73584 * group.width, group.minY + 0.69130 * group.height), controlPoint1: CGPointMake(group.minX + 0.79108 * group.width, group.minY + 0.74538 * group.height), controlPoint2: CGPointMake(group.minX + 0.76585 * group.width, group.minY + 0.72068 * group.height))
        photoPath.addLineToPoint(CGPointMake(group.minX + 0.75761 * group.width, group.minY + 0.69130 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.76988 * group.width, group.minY + 0.67935 * group.height), controlPoint1: CGPointMake(group.minX + 0.76439 * group.width, group.minY + 0.69130 * group.height), controlPoint2: CGPointMake(group.minX + 0.76988 * group.width, group.minY + 0.68596 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.76681 * group.width, group.minY + 0.67166 * group.height), controlPoint1: CGPointMake(group.minX + 0.76988 * group.width, group.minY + 0.67638 * group.height), controlPoint2: CGPointMake(group.minX + 0.76865 * group.width, group.minY + 0.67375 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.61973 * group.width, group.minY + 0.50417 * group.height), controlPoint1: CGPointMake(group.minX + 0.76692 * group.width, group.minY + 0.67156 * group.height), controlPoint2: CGPointMake(group.minX + 0.61973 * group.width, group.minY + 0.50417 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.61040 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.61735 * group.width, group.minY + 0.50171 * group.height), controlPoint2: CGPointMake(group.minX + 0.61413 * group.width, group.minY + 0.50000 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.60173 * group.width, group.minY + 0.50350 * group.height), controlPoint1: CGPointMake(group.minX + 0.60702 * group.width, group.minY + 0.50000 * group.height), controlPoint2: CGPointMake(group.minX + 0.60395 * group.width, group.minY + 0.50134 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.57280 * group.width, group.minY + 0.53170 * group.height), controlPoint1: CGPointMake(group.minX + 0.60173 * group.width, group.minY + 0.50350 * group.height), controlPoint2: CGPointMake(group.minX + 0.58777 * group.width, group.minY + 0.51711 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.27169 * group.width, group.minY + 0.23696 * group.height), controlPoint1: CGPointMake(group.minX + 0.46300 * group.width, group.minY + 0.42422 * group.height), controlPoint2: CGPointMake(group.minX + 0.34466 * group.width, group.minY + 0.30839 * group.height))
        photoPath.addLineToPoint(CGPointMake(group.minX + 0.81894 * group.width, group.minY + 0.23696 * group.height))
        photoPath.addCurveToPoint(CGPointMake(group.minX + 0.84348 * group.width, group.minY + 0.26087 * group.height), controlPoint1: CGPointMake(group.minX + 0.83249 * group.width, group.minY + 0.23696 * group.height), controlPoint2: CGPointMake(group.minX + 0.84348 * group.width, group.minY + 0.24767 * group.height))
        photoPath.closePath()
        color.setFill()
        photoPath.fill()


        //// circle Drawing
        var circlePath = UIBezierPath()
        circlePath.moveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.04348 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.24697 * group.width, group.minY + 0.11996 * group.height), controlPoint1: CGPointMake(group.minX + 0.40641 * group.width, group.minY + 0.04348 * group.height), controlPoint2: CGPointMake(group.minX + 0.31939 * group.width, group.minY + 0.07164 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.18835 * group.width, group.minY + 0.16640 * group.height), controlPoint1: CGPointMake(group.minX + 0.22616 * group.width, group.minY + 0.13384 * group.height), controlPoint2: CGPointMake(group.minX + 0.20656 * group.width, group.minY + 0.14938 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.83757 * group.width, group.minY + 0.80735 * group.height), controlPoint1: CGPointMake(group.minX + 0.28203 * group.width, group.minY + 0.25889 * group.height), controlPoint2: CGPointMake(group.minX + 0.74345 * group.width, group.minY + 0.71443 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.95652 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.91147 * group.width, group.minY + 0.72623 * group.height), controlPoint2: CGPointMake(group.minX + 0.95652 * group.width, group.minY + 0.61838 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.04348 * group.height), controlPoint1: CGPointMake(group.minX + 0.95652 * group.width, group.minY + 0.24787 * group.height), controlPoint2: CGPointMake(group.minX + 0.75213 * group.width, group.minY + 0.04348 * group.height))
        circlePath.closePath()
        circlePath.moveToPoint(CGPointMake(group.minX + 0.16454 * group.width, group.minY + 0.19035 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.04348 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.08939 * group.width, group.minY + 0.27172 * group.height), controlPoint2: CGPointMake(group.minX + 0.04348 * group.width, group.minY + 0.38050 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.95652 * group.height), controlPoint1: CGPointMake(group.minX + 0.04348 * group.width, group.minY + 0.75213 * group.height), controlPoint2: CGPointMake(group.minX + 0.24787 * group.width, group.minY + 0.95652 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.81606 * group.width, group.minY + 0.82942 * group.height), controlPoint1: CGPointMake(group.minX + 0.62267 * group.width, group.minY + 0.95652 * group.height), controlPoint2: CGPointMake(group.minX + 0.73403 * group.width, group.minY + 0.90814 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.16454 * group.width, group.minY + 0.19035 * group.height), controlPoint1: CGPointMake(group.minX + 0.72176 * group.width, group.minY + 0.73692 * group.height), controlPoint2: CGPointMake(group.minX + 0.25334 * group.width, group.minY + 0.27745 * group.height))
        circlePath.closePath()
        circlePath.moveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.50000 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 1.00000 * group.height), controlPoint1: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.77614 * group.height), controlPoint2: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 1.00000 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.22386 * group.width, group.minY + 1.00000 * group.height), controlPoint2: CGPointMake(group.minX + -0.00000 * group.width, group.minY + 0.77614 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.20376 * group.width, group.minY + 0.09717 * group.height), controlPoint1: CGPointMake(group.minX + 0.00000 * group.width, group.minY + 0.33474 * group.height), controlPoint2: CGPointMake(group.minX + 0.08018 * group.width, group.minY + 0.18820 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 0.50000 * group.width, group.minY + 0.00000 * group.height), controlPoint1: CGPointMake(group.minX + 0.28667 * group.width, group.minY + 0.03609 * group.height), controlPoint2: CGPointMake(group.minX + 0.38912 * group.width, group.minY + 0.00000 * group.height))
        circlePath.addCurveToPoint(CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.50000 * group.height), controlPoint1: CGPointMake(group.minX + 0.77614 * group.width, group.minY + 0.00000 * group.height), controlPoint2: CGPointMake(group.minX + 1.00000 * group.width, group.minY + 0.22386 * group.height))
        circlePath.closePath()
        color.setFill()
        circlePath.fill()
    }

    public class func drawKeyInputButton(#frame: CGRect, title: String, highlighted: Bool, prominent: Bool, reverse: Bool, disabled: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let normalBackgroundColor = UIColor(red: 0.529, green: 0.529, blue: 0.529, alpha: 1.000)
        let detailColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        var detailColorHueComponent: CGFloat = 1,
            detailColorSaturationComponent: CGFloat = 1,
            detailColorBrightnessComponent: CGFloat = 1
        detailColor.getHue(&detailColorHueComponent, saturation: &detailColorSaturationComponent, brightness: &detailColorBrightnessComponent, alpha: nil)

        let disabledDetailColor = UIColor(hue: detailColorHueComponent, saturation: detailColorSaturationComponent, brightness: 0.5, alpha: CGColorGetAlpha(detailColor.CGColor))
        let highlightedBackgroundColor = UIColor(red: 0.298, green: 0.298, blue: 0.306, alpha: 1.000)
        let prominentBackgroundColor = UIColor(red: 0.000, green: 0.463, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let normalStateColor = prominent ? prominentBackgroundColor : (reverse ? highlightedBackgroundColor : normalBackgroundColor)
        let highlightedStateColor = prominent ? highlightedBackgroundColor : (reverse ? normalBackgroundColor : highlightedBackgroundColor)
        let backgroundColor = highlighted ? highlightedStateColor : normalStateColor
        let foregroundColor = disabled ? disabledDetailColor : detailColor

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRectMake(frame.minX, frame.minY, frame.width, frame.height))
        backgroundColor.setFill()
        rectanglePath.fill()
        foregroundColor.setStroke()
        rectanglePath.lineWidth = 0.5
        rectanglePath.stroke()


        //// Text Drawing
        let textRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        let textStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        textStyle.alignment = NSTextAlignment.Center

        let textFontAttributes = [NSFontAttributeName: UIFont.boldSystemFontOfSize(30), NSForegroundColorAttributeName: foregroundColor, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = NSString(string: title).boundingRectWithSize(CGSizeMake(textRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: textFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, textRect);
        NSString(string: title).drawInRect(CGRectMake(textRect.minX, textRect.minY + (textRect.height - textTextHeight) / 2, textRect.width, textTextHeight), withAttributes: textFontAttributes)
        CGContextRestoreGState(context)
    }

    public class func drawDeleteBackwardButton(#frame: CGRect, highlighted: Bool, disabled: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Rectangle Drawing
        let rectangleRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        CGContextSaveGState(context)
        UIRectClip(rectangleRect)
        CGContextTranslateCTM(context, rectangleRect.origin.x, rectangleRect.origin.y)

        DrawingKit.drawKeyInputButton(frame: CGRectMake(0, 0, rectangleRect.size.width, rectangleRect.size.height), title: "", highlighted: highlighted, prominent: false, reverse: true, disabled: disabled)
        CGContextRestoreGState(context)


        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX + floor(frame.width * 0.29245 + 0.5), frame.minY + floor(frame.height * 0.22222 + 0.5), floor(frame.width * 0.71698 + 0.5) - floor(frame.width * 0.29245 + 0.5), floor(frame.height * 0.77778 + 0.5) - floor(frame.height * 0.22222 + 0.5))
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        DrawingKit.drawDeleteBackward(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), disabled: disabled)
        CGContextRestoreGState(context)
    }

    public class func drawDoneButton(#frame: CGRect, highlighted: Bool) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        DrawingKit.drawKeyInputButton(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), title: "Done", highlighted: highlighted, prominent: true, reverse: false, disabled: false)
        CGContextRestoreGState(context)
    }

    public class func drawDeleteBackward(#frame: CGRect, disabled: Bool) {
        //// Color Declarations
        let detailColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        var detailColorHueComponent: CGFloat = 1,
            detailColorSaturationComponent: CGFloat = 1,
            detailColorBrightnessComponent: CGFloat = 1
        detailColor.getHue(&detailColorHueComponent, saturation: &detailColorSaturationComponent, brightness: &detailColorBrightnessComponent, alpha: nil)

        let disabledDetailColor = UIColor(hue: detailColorHueComponent, saturation: detailColorSaturationComponent, brightness: 0.5, alpha: CGColorGetAlpha(detailColor.CGColor))

        //// Variable Declarations
        let foregroundColor = disabled ? disabledDetailColor : detailColor

        //// Delete Symbol Drawing
        var deleteSymbolPath = UIBezierPath()
        deleteSymbolPath.moveToPoint(CGPointMake(frame.minX + 0.74055 * frame.width, frame.minY + 0.20608 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.58459 * frame.width, frame.minY + 0.42905 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.42817 * frame.width, frame.minY + 0.20608 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.37902 * frame.width, frame.minY + 0.27635 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.53497 * frame.width, frame.minY + 0.50000 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.37902 * frame.width, frame.minY + 0.72297 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.42817 * frame.width, frame.minY + 0.79392 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.58459 * frame.width, frame.minY + 0.57027 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.74055 * frame.width, frame.minY + 0.79392 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.79017 * frame.width, frame.minY + 0.72297 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.63422 * frame.width, frame.minY + 0.50000 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.79017 * frame.width, frame.minY + 0.27635 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.74055 * frame.width, frame.minY + 0.20608 * frame.height))
        deleteSymbolPath.closePath()
        deleteSymbolPath.moveToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00002 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 1.00000 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.34972 * frame.width, frame.minY + 1.00000 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.50000 * frame.height))
        deleteSymbolPath.addCurveToPoint(CGPointMake(frame.minX + 0.23565 * frame.width, frame.minY + 0.16309 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.00000 * frame.width, frame.minY + 0.50000 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.13360 * frame.width, frame.minY + 0.30899 * frame.height))
        deleteSymbolPath.addCurveToPoint(CGPointMake(frame.minX + 0.34972 * frame.width, frame.minY + 0.00000 * frame.height), controlPoint1: CGPointMake(frame.minX + 0.29870 * frame.width, frame.minY + 0.07293 * frame.height), controlPoint2: CGPointMake(frame.minX + 0.34972 * frame.width, frame.minY + 0.00000 * frame.height))
        deleteSymbolPath.addLineToPoint(CGPointMake(frame.minX + 1.00000 * frame.width, frame.minY + 0.00002 * frame.height))
        deleteSymbolPath.closePath()
        foregroundColor.setFill()
        deleteSymbolPath.fill()
    }

    public class func drawSplitColorThumbButton(#frame: CGRect, color1: UIColor, color2: UIColor) {

        //// upperHalfCircle Drawing
        var upperHalfCircleRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        var upperHalfCirclePath = UIBezierPath()
        upperHalfCirclePath.addArcWithCenter(CGPointMake(upperHalfCircleRect.midX, upperHalfCircleRect.midY), radius: upperHalfCircleRect.width / 2, startAngle: -225 * CGFloat(M_PI)/180, endAngle: -45 * CGFloat(M_PI)/180, clockwise: true)
        upperHalfCirclePath.addLineToPoint(CGPointMake(upperHalfCircleRect.midX, upperHalfCircleRect.midY))
        upperHalfCirclePath.closePath()

        color1.setFill()
        upperHalfCirclePath.fill()


        //// lowerHalfCircle Drawing
        var lowerHalfCircleRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        var lowerHalfCirclePath = UIBezierPath()
        lowerHalfCirclePath.addArcWithCenter(CGPointMake(lowerHalfCircleRect.midX, lowerHalfCircleRect.midY), radius: lowerHalfCircleRect.width / 2, startAngle: -45 * CGFloat(M_PI)/180, endAngle: 135 * CGFloat(M_PI)/180, clockwise: true)
        lowerHalfCirclePath.addLineToPoint(CGPointMake(lowerHalfCircleRect.midX, lowerHalfCircleRect.midY))
        lowerHalfCirclePath.closePath()

        color2.setFill()
        lowerHalfCirclePath.fill()
    }

    public class func drawOpacityThumb(#frame: CGRect, opacity: CGFloat) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let opacityColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Variable Declarations
        let filteredOpacity: CGFloat = min(1, max(0, opacity))
        let representedOpacityColor = UIColor(red: filteredOpacity, green: filteredOpacity, blue: filteredOpacity, alpha: 1)

        //// Symbol Drawing
        let symbolRect = CGRectMake(frame.minX, frame.minY, frame.width, frame.height)
        CGContextSaveGState(context)
        UIRectClip(symbolRect)
        CGContextTranslateCTM(context, symbolRect.origin.x, symbolRect.origin.y)

        DrawingKit.drawSplitColorThumbButton(frame: CGRectMake(0, 0, symbolRect.size.width, symbolRect.size.height), color1: representedOpacityColor, color2: opacityColor)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class func imageOfNoImage(#frame: CGRect, color: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            DrawingKit.drawNoImage(frame: frame, color: color)

        let imageOfNoImage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfNoImage
    }

    public class func imageOfKeyInputButton(#frame: CGRect, title: String, highlighted: Bool, prominent: Bool, reverse: Bool, disabled: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            DrawingKit.drawKeyInputButton(frame: frame, title: title, highlighted: highlighted, prominent: prominent, reverse: reverse, disabled: disabled)

        let imageOfKeyInputButton = UIGraphicsGetImageFromCurrentImageContext()!.resizableImageWithCapInsets(UIEdgeInsetsMake(10, 10, 10, 10), resizingMode: UIImageResizingMode.Stretch)
        UIGraphicsEndImageContext()

        return imageOfKeyInputButton
    }

    public class func imageOfDeleteBackwardButton(#frame: CGRect, highlighted: Bool, disabled: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            DrawingKit.drawDeleteBackwardButton(frame: frame, highlighted: highlighted, disabled: disabled)

        let imageOfDeleteBackwardButton = UIGraphicsGetImageFromCurrentImageContext()!.resizableImageWithCapInsets(UIEdgeInsetsMake(10, 10, 10, 10), resizingMode: UIImageResizingMode.Stretch)
        UIGraphicsEndImageContext()

        return imageOfDeleteBackwardButton
    }

    public class func imageOfDoneButton(#frame: CGRect, highlighted: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            DrawingKit.drawDoneButton(frame: frame, highlighted: highlighted)

        let imageOfDoneButton = UIGraphicsGetImageFromCurrentImageContext()!.resizableImageWithCapInsets(UIEdgeInsetsMake(10, 10, 10, 10), resizingMode: UIImageResizingMode.Stretch)
        UIGraphicsEndImageContext()

        return imageOfDoneButton
    }

    public class func imageOfDeleteBackward(#frame: CGRect, disabled: Bool) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            DrawingKit.drawDeleteBackward(frame: frame, disabled: disabled)

        let imageOfDeleteBackward = UIGraphicsGetImageFromCurrentImageContext()!.imageWithRenderingMode(UIImageRenderingMode.AlwaysTemplate)
        UIGraphicsEndImageContext()

        return imageOfDeleteBackward
    }

    public class func imageOfSplitColorThumbButton(#frame: CGRect, color1: UIColor, color2: UIColor) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            DrawingKit.drawSplitColorThumbButton(frame: frame, color1: color1, color2: color2)

        let imageOfSplitColorThumbButton = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfSplitColorThumbButton
    }

    public class func imageOfOpacityThumb(#frame: CGRect, opacity: CGFloat) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(frame.size, false, 0)
            DrawingKit.drawOpacityThumb(frame: frame, opacity: opacity)

        let imageOfOpacityThumb = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return imageOfOpacityThumb
    }

}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
