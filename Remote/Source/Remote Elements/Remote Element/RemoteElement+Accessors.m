//
// RemoteElement+Accessors
// Remote
//
// Created by Jason Cardwell on 2/9/13.
// Copyright (c) 2013 Moondeer Studios. All rights reserved.
//
#import "RemoteElement_Private.h"


@implementation RemoteElement (CustomTypeAccessors)

////////////////////////////////////////////////////////////////////////////////
#pragma mark - Accessors for custom typedef properties
////////////////////////////////////////////////////////////////////////////////

- (void)setSubtype:(RESubtype)subtype
{
    [self willChangeValueForKey:@"subtype"];
    self.primitiveSubtype = @(subtype);
    [self didChangeValueForKey:@"subtype"];
}

- (RESubtype)subtype
{
    [self willAccessValueForKey:@"subtype"];
    NSNumber * subtype = self.primitiveSubtype;
    [self didAccessValueForKey:@"subtype"];
    return (subtype ? [subtype shortValue] : RESubtypeUndefined);
}

- (RERole)role
{
    [self willAccessValueForKey:@"role"];
    NSNumber * role = self.primitiveRole;
    [self didAccessValueForKey:@"role"];
    return [role unsignedShortValue];
}

- (void)setRole:(RERole)role
{
    [self willChangeValueForKey:@"role"];
    self.primitiveRole = @(role);
    [self didChangeValueForKey:@"role"];
}

- (void)setOptions:(REOptions)options
{
    [self willChangeValueForKey:@"options"];
    self.primitiveOptions = @(options);
    [self didChangeValueForKey:@"options"];
}

- (REOptions)options
{
    [self willAccessValueForKey:@"options"];
    NSNumber * options = self.primitiveOptions;
    [self didAccessValueForKey:@"options"];
    return (options ? [options shortValue] : REOptionsDefault);
}

- (void)setState:(REState)state
{
    [self willChangeValueForKey:@"state"];
    self.primitiveState = @(state);
    [self didChangeValueForKey:@"state"];
}

- (REState)state
{
    [self willAccessValueForKey:@"state"];
    NSNumber * state = self.primitiveState;
    [self didAccessValueForKey:@"state"];
    return (state ? [state shortValue] : REStateDefault);
}

- (void)setShape:(REShape)shape
{
    [self willChangeValueForKey:@"shape"];
    self.primitiveShape = @(shape);
    [self didChangeValueForKey:@"shape"];
}

- (REShape)shape
{
    [self willAccessValueForKey:@"shape"];
    NSNumber * shape = self.primitiveShape;
    [self didAccessValueForKey:@"shape"];
    return (shape ? [shape shortValue] : REShapeUndefined);
}

- (void)setStyle:(REStyle)style
{
    [self willChangeValueForKey:@"style"];
    self.primitiveStyle = @(style);
    [self didChangeValueForKey:@"style"];
}

- (REStyle)style
{
    [self willAccessValueForKey:@"style"];
    NSNumber * style = self.primitiveStyle;
    [self didAccessValueForKey:@"style"];
    return (style ? [style shortValue] : REStyleUndefined);
}

- (void)setThemeFlags:(REThemeOverrideFlags)themeFlags
{
    [self willChangeValueForKey:@"themeFlags"];
    self.primitiveThemeFlags = @(themeFlags);
    [self didChangeValueForKey:@"themeFlags"];
}

- (REThemeOverrideFlags)themeFlags
{
    [self willAccessValueForKey:@"themeFlags"];
    NSNumber * themeFlags = self.primitiveThemeFlags;
    [self didAccessValueForKey:@"themeFlags"];
    return (themeFlags ? [themeFlags intValue] : REThemeNone);
}

/*
 - (NSString *)name
 {
 static dispatch_once_t onceToken;
 static NSDictionary const * index;
 dispatch_once(&onceToken, ^{
 index = @{ @(RETypeRemote)                    : @"Remote",
 @(RETypeButtonGroup)               : @"ButtonGroup",
 @(RETypeButton)                    : @"Button" };
 });

 [self willAccessValueForKey:@"name"];
 NSString * name = self.primitiveName;
 [self didAccessValueForKey:@"name"];
 if (!name)
 {
 name = (index[@(self.elementType)] ?: @"unnamed");
 NSNumber * entityCount = [RemoteElement
 MR_numberOfEntitiesWithContext:self.managedObjectContext];
 assert(entityCount);
 name = [name stringByAppendingString:[entityCount stringValue]];
 self.primitiveName = name;
 }
 return name;
 }
 */


@end

/**
 * Implemented to replace the possibly broken NSSet accessors generated by Core Data
 */
@implementation RemoteElement (ConstraintAccessors)

MSSTATIC_STRING_CONST kConstraintsKey           = @"contraints";
MSSTATIC_STRING_CONST kFirstItemConstraintsKey  = @"firstItemConstraints";
MSSTATIC_STRING_CONST kSecondItemConstraintsKey = @"secondItemContraints";

- (void)addConstraint:(Constraint *)constraint {
    assert(constraint);
    //TODO: Still not sure if owner should be set here or in constraint initializer
    constraint.owner = self;
    [self addConstraintsObject:constraint];
}

- (void)removeConstraint:(Constraint *)constraint {
    [self removeConstraintsObject:constraint];
    
    [self.managedObjectContext performBlockAndWait:^{
        [self.managedObjectContext deleteObject:constraint];
    }];
}

- (void)addConstraintsObject:(Constraint *)constraint
{
    NSSet * values = [NSSet setWithObject:constraint];

    [self willChangeValueForKey:kConstraintsKey
                withSetMutation:NSKeyValueUnionSetMutation
                   usingObjects:values];

    [self.primitiveConstraints addObject:constraint];

    [self didChangeValueForKey:kConstraintsKey
               withSetMutation:NSKeyValueUnionSetMutation
                  usingObjects:values];
}

- (void)removeConstraintsObject:(Constraint *)constraint
{
    NSSet * values = [NSSet setWithObject:constraint];

    [self willChangeValueForKey:kConstraintsKey
                withSetMutation:NSKeyValueMinusSetMutation
                   usingObjects:values];

    [self.primitiveConstraints minusSet:values];

    [self didChangeValueForKey:kConstraintsKey
               withSetMutation:NSKeyValueMinusSetMutation
                  usingObjects:values];
    
}

- (void)addConstraints:(NSSet *)constraints
{
    for (Constraint * constraint in constraints)
        [self addConstraint:constraint];
}

- (void)removeConstraints:(NSSet *)constraints
{
//    for (REConstraint * constraint in constraints)
//        [self removeConstraint:constraint];
    [self willChangeValueForKey:kConstraintsKey
                withSetMutation:NSKeyValueMinusSetMutation
                   usingObjects:constraints];

    [self.primitiveConstraints minusSet:constraints];

    [self didChangeValueForKey:kConstraintsKey
               withSetMutation:NSKeyValueMinusSetMutation
                  usingObjects:constraints];
}

- (void)addFirstItemConstraintsObject:(Constraint *)constraint
{
    NSSet * values = [NSSet setWithObject:constraint];

    [self willChangeValueForKey:kFirstItemConstraintsKey
                withSetMutation:NSKeyValueUnionSetMutation
                   usingObjects:values];

    [self.primitiveFirstItemConstraints unionSet:values];

    [self didChangeValueForKey:kFirstItemConstraintsKey
               withSetMutation:NSKeyValueUnionSetMutation
                  usingObjects:values];
}

- (void)removeFirstItemConstraintsObject:(Constraint *)constraint
{
    NSSet * values = [NSSet setWithObject:constraint];

    [self willChangeValueForKey:kFirstItemConstraintsKey
                withSetMutation:NSKeyValueMinusSetMutation
                   usingObjects:values];

    [self.primitiveFirstItemConstraints minusSet:values];

    [self didChangeValueForKey:kFirstItemConstraintsKey
               withSetMutation:NSKeyValueMinusSetMutation
                  usingObjects:values];
}

- (void)addFirstItemConstraints:(NSSet *)constraints
{
    [self willChangeValueForKey:kFirstItemConstraintsKey
                withSetMutation:NSKeyValueUnionSetMutation
                   usingObjects:constraints];

    [self.primitiveFirstItemConstraints unionSet:constraints];

    [self didChangeValueForKey:kFirstItemConstraintsKey
               withSetMutation:NSKeyValueUnionSetMutation
                  usingObjects:constraints];
}

- (void)removeFirstItemConstraints:(NSSet *)constraints
{
    [self willChangeValueForKey:kFirstItemConstraintsKey
                withSetMutation:NSKeyValueMinusSetMutation
                   usingObjects:constraints];

    [self.primitiveFirstItemConstraints minusSet:constraints];

    [self didChangeValueForKey:kFirstItemConstraintsKey
               withSetMutation:NSKeyValueMinusSetMutation
                  usingObjects:constraints];
}

- (void)addSecondItemConstraintsObject:(Constraint *)constraint
{
    NSSet * values = [NSSet setWithObject:constraint];

    [self willChangeValueForKey:kSecondItemConstraintsKey
                withSetMutation:NSKeyValueUnionSetMutation
                   usingObjects:values];

    [self.primitiveSecondItemConstraints unionSet:values];

    [self didChangeValueForKey:kSecondItemConstraintsKey
               withSetMutation:NSKeyValueUnionSetMutation
                  usingObjects:values];
}

- (void)removeSecondItemConstraintsObject:(Constraint *)constraint
{
    NSSet * values = [NSSet setWithObject:constraint];

    [self willChangeValueForKey:kSecondItemConstraintsKey
                withSetMutation:NSKeyValueMinusSetMutation
                   usingObjects:values];

    [self.primitiveSecondItemConstraints minusSet:values];

    [self didChangeValueForKey:kSecondItemConstraintsKey
               withSetMutation:NSKeyValueMinusSetMutation
                  usingObjects:values];
}

- (void)addSecondItemConstraints:(NSSet *)constraints
{
    [self willChangeValueForKey:kSecondItemConstraintsKey
                withSetMutation:NSKeyValueUnionSetMutation
                   usingObjects:constraints];

    [self.primitiveSecondItemConstraints unionSet:constraints];

    [self didChangeValueForKey:kSecondItemConstraintsKey
               withSetMutation:NSKeyValueUnionSetMutation
                  usingObjects:constraints];
}

- (void)removeSecondItemConstraints:(NSSet *)constraints
{
    [self willChangeValueForKey:kSecondItemConstraintsKey
                withSetMutation:NSKeyValueMinusSetMutation
                   usingObjects:constraints];

    [self.primitiveSecondItemConstraints minusSet:constraints];

    [self didChangeValueForKey:kSecondItemConstraintsKey
               withSetMutation:NSKeyValueMinusSetMutation
                  usingObjects:constraints];
}

@end

/**
 * Implemented to replace the broken NSOrderedSet accessors generated by Core Data
 */
@implementation RemoteElement (SubelementsAccessors)

MSSTATIC_STRING_CONST kSubelementsKey = @"subelements";

- (void)insertObject:(RemoteElement *)value inSubelementsAtIndex:(NSUInteger)idx
{
    NSIndexSet * indices = [NSIndexSet indexSetWithIndex:idx];
    [self willChange:NSKeyValueChangeInsertion valuesAtIndexes:indices forKey:kSubelementsKey];
    [self.primitiveSubelements insertObject:value atIndex:idx];
    [self didChange:NSKeyValueChangeInsertion valuesAtIndexes:indices forKey:kSubelementsKey];
}

- (void)removeObjectFromSubelementsAtIndex:(NSUInteger)idx
{
    NSIndexSet * indices = [NSIndexSet indexSetWithIndex:idx];
    [self willChange:NSKeyValueChangeRemoval valuesAtIndexes:indices forKey:kSubelementsKey];
    [self.primitiveSubelements removeObjectAtIndex:idx];
    [self didChange:NSKeyValueChangeRemoval valuesAtIndexes:indices forKey:kSubelementsKey];
}

- (void)insertSubelements:(NSArray *)values atIndexes:(NSIndexSet *)indices
{
    [self willChange:NSKeyValueChangeInsertion valuesAtIndexes:indices forKey:kSubelementsKey];
    [self.primitiveSubelements insertObjects:values atIndexes:indices];
    [self didChange:NSKeyValueChangeInsertion valuesAtIndexes:indices forKey:kSubelementsKey];
}

- (void)removeSubelementsAtIndexes:(NSIndexSet *)indices
{
    [self willChange:NSKeyValueChangeRemoval valuesAtIndexes:indices forKey:kSubelementsKey];
    [self.primitiveSubelements removeObjectsAtIndexes:indices];
    [self didChange:NSKeyValueChangeRemoval valuesAtIndexes:indices forKey:kSubelementsKey];
}

- (void)replaceObjectInSubelementsAtIndex:(NSUInteger)idx withObject:(RemoteElement *)value
{
    NSIndexSet * indices = [NSIndexSet indexSetWithIndex:idx];
    [self willChange:NSKeyValueChangeReplacement valuesAtIndexes:indices forKey:kSubelementsKey];
    self.primitiveSubelements[idx] = value;
    [self didChange:NSKeyValueChangeReplacement valuesAtIndexes:indices forKey:kSubelementsKey];
}

- (void)replaceSubelementsAtIndexes:(NSIndexSet *)indices withSubelements:(NSArray *)values
{
    [self willChange:NSKeyValueChangeReplacement valuesAtIndexes:indices forKey:kSubelementsKey];
    [self.primitiveSubelements replaceObjectsAtIndexes:indices withObjects:values];
    [self didChange:NSKeyValueChangeReplacement valuesAtIndexes:indices forKey:kSubelementsKey];
}

- (void)addSubelementsObject:(RemoteElement *)value
{
    NSIndexSet * indices = [NSIndexSet indexSetWithIndex:[[self primitiveSubelements] count]];
    [self willChange:NSKeyValueChangeInsertion valuesAtIndexes:indices forKey:kSubelementsKey];
    [self.primitiveSubelements addObject:value];
    [self didChange:NSKeyValueChangeInsertion valuesAtIndexes:indices forKey:kSubelementsKey];
}

- (void)removeSubelementsObject:(RemoteElement *)value
{
    NSUInteger   idx = [[self primitiveValueForKey:kSubelementsKey] indexOfObject:value];
    if (idx != NSNotFound) {
        NSIndexSet * indices = [NSIndexSet indexSetWithIndex:idx];
        [self willChange:NSKeyValueChangeRemoval valuesAtIndexes:indices forKey:kSubelementsKey];
        [self.primitiveSubelements removeObject:value];
        [self didChange:NSKeyValueChangeRemoval valuesAtIndexes:indices forKey:kSubelementsKey];
    }
}

- (void)addSubelements:(NSOrderedSet *)values
{
    if ([values count]) {
        NSIndexSet * indices = [NSIndexSet indexSetWithIndexesInRange:
                                NSMakeRange([[self primitiveSubelements] count], [values count])];
        [self willChange:NSKeyValueChangeInsertion valuesAtIndexes:indices forKey:kSubelementsKey];
        [self.primitiveSubelements addObjectsFromArray:[values array]];
        [self didChange:NSKeyValueChangeInsertion valuesAtIndexes:indices forKey:kSubelementsKey];
    }
}

- (void)removeSubelements:(NSOrderedSet *)values {
    NSIndexSet * indices = [self.primitiveSubelements
                            indexesOfObjectsPassingTest:^BOOL(id obj, NSUInteger idx, BOOL *stop) {
                                return YES;
                            }];

    if ([indices count]) {
        [self willChange:NSKeyValueChangeRemoval valuesAtIndexes:indices forKey:kSubelementsKey];
        [self.primitiveSubelements removeObjectsAtIndexes:indices];
        [self didChange:NSKeyValueChangeRemoval valuesAtIndexes:indices forKey:kSubelementsKey];
    }
}

@end
