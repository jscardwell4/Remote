//
// BatteryStatusButtonView.m
// Remote
//
// Created by Jason Cardwell on 5/24/11.
// Copyright 2011 Moondeer Studios. All rights reserved.
//
#import "RemoteElementView_Private.h"
#import "ImageView.h"
#import "Button.h"
#import "Image.h"
#import "ControlStateImageSet.h"
#import "ImageView.h"
#import "Image.h"

@interface BatteryStatusButtonView ()

@property (nonatomic, assign) CGFloat              batteryLevel;   /// current charge level
@property (nonatomic, assign) UIDeviceBatteryState batteryState;   /// i.e. charging, full

@property (nonatomic, strong) MSNotificationReceptionist * batteryLevelReceptionist;
@property (nonatomic, strong) MSNotificationReceptionist * batteryStateReceptionist;

@end

@implementation BatteryStatusButtonView

- (void)initializeIVARs {
  [super initializeIVARs];

  if (TARGET_IPHONE_SIMULATOR) {
    self.batteryLevel = 0.75;
    self.batteryState = UIDeviceBatteryStateCharging;
  } else   {
    self.batteryLevel = CurrentDevice.batteryLevel;
    self.batteryState = CurrentDevice.batteryState;
  }

  [CurrentDevice setBatteryMonitoringEnabled:YES];
}

- (void)registerForChangeNotification {
  [super registerForChangeNotification];

  __weak BatteryStatusButtonView * weakself = self;
  self.batteryLevelReceptionist =
    [MSNotificationReceptionist receptionistForObject:CurrentDevice
                                     notificationName:UIDeviceBatteryLevelDidChangeNotification
                                                queue:MainQueue
                                              handler:^(MSNotificationReceptionist *rec, NSNotification *note) {
                                                weakself.batteryLevel = [CurrentDevice batteryLevel];
                                                [weakself setNeedsDisplay];
                                              }];
  self.batteryStateReceptionist =
  [MSNotificationReceptionist receptionistForObject:CurrentDevice
                                   notificationName:UIDeviceBatteryStateDidChangeNotification
                                              queue:MainQueue
                                            handler:^(MSNotificationReceptionist *rec, NSNotification *note) {
                                              weakself.batteryState = [CurrentDevice batteryState];
                                              [weakself setNeedsDisplay];
                                            }];
}

- (void)initializeViewFromModel {
  [super initializeViewFromModel];

  ImageView * frame     = self.model.icons[UIControlStateNormal];
  ImageView * plug      = self.model.icons[UIControlStateSelected];
  ImageView * lightning = self.model.icons[UIControlStateDisabled];
  ImageView * fill      = self.model.icons[UIControlStateHighlighted];
  _frameColor     = self.model.icons[UIControlStateNormal].color;
  _plugColor      = self.model.icons[UIControlStateSelected].color;
  _lightningColor = self.model.icons[UIControlStateDisabled].color;
  _fillColor      = self.model.icons[UIControlStateHighlighted].color;
  _frameIcon      = self.model.icons[UIControlStateNormal].colorImage;
  _plugIcon       = self.model.icons[UIControlStateSelected].colorImage;
  _lightningIcon  = self.model.icons[UIControlStateDisabled].colorImage;
}


- (CGSize)intrinsicContentSize { return self.model.icon ? self.model.icon.image.size: REMinimumSize; }

/**
 * Overrides the `ButtonView` implementation to perform custom drawing of the 'battery' frame,
 * the fill color that indicates battery level, and the icon that indicates battery state.
 */
- (void)drawContentInContext:(CGContextRef)ctx inRect:(CGRect)rect {
  
  if (_batteryLevel == -1) {
    _batteryLevel = CurrentDevice.batteryLevel;
    _batteryState = CurrentDevice.batteryState;
  }

  CGRect insetRect     = CGRectInset(rect, 2.0f, 2.0f);
  CGSize frameIconSize = _frameIcon.size;
  CGSize frameSize     = (CGSizeContainsSize(insetRect.size, frameIconSize)
                          ? frameIconSize
                          : CGSizeAspectMappedToSize(frameIconSize, insetRect.size, YES));
  CGRect frameRect = CGRectMake(CGRectGetMidX(insetRect) - frameSize.width / 2.0,
                                CGRectGetMidY(insetRect) - frameSize.height / 2.0,
                                frameSize.width,
                                frameSize.height);

  [_frameIcon drawInRect:frameRect];

  CGFloat padding   = frameSize.width * 0.06;
  CGSize  paintSize = CGSizeMake(frameSize.width - 4 * padding,
                                 frameSize.height - 3 * padding);
  CGRect paintRect = CGRectMake(frameRect.origin.x + padding,
                                frameRect.origin.y + 1.5 * padding,
                                paintSize.width,
                                paintSize.height);

  paintRect.size.width *= _batteryLevel;

  UIBezierPath * path = [UIBezierPath bezierPathWithRect:paintRect];

  [self.fillColor setFill];
  [path fill];

  if (_batteryState == UIDeviceBatteryStateFull) {
    [_plugIcon drawInRect:CGRectInset(frameRect, padding, padding)];

  } else if (_batteryState == UIDeviceBatteryStateCharging)   {
    CGSize lightningIconSize = _lightningIcon.size;
    CGSize lightningSize     = (CGSizeContainsSize(paintSize, lightningIconSize)
                                ? lightningIconSize
                                : CGSizeAspectMappedToSize(lightningIconSize, paintSize, YES));
    CGRect lightningRect = (CGRect) {
      .size = lightningSize
    };

    lightningRect.origin.x = CGRectGetMidX(frameRect) - lightningSize.width / 2.0;
    lightningRect.origin.y = CGRectGetMidY(frameRect) - lightningSize.height / 2.0;
    [_lightningIcon drawInRect:lightningRect];
  }
}

@end
