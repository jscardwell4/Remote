//
// RemoteElement+Accessors
// iPhonto
//
// Created by Jason Cardwell on 2/9/13.
// Copyright (c) 2013 Moondeer Studios. All rights reserved.
//
#import "RemoteElement_Private.h"

/**
 * Implemented to replace the possibly broken NSSet accessors generated by Core Data
 */
@implementation RemoteElement (ConstraintAccessors)

MSKIT_STATIC_STRING_CONST kConstraintsKey = @"contraints";
MSKIT_STATIC_STRING_CONST   kFirstItemConstraintsKey  = @"firstItemConstraints";
MSKIT_STATIC_STRING_CONST   kSecondItemConstraintsKey = @"secondItemContraints";

- (void)addConstraintsObject:(RemoteElementLayoutConstraint *)value {
    NSSet * values = [NSSet setWithObject:value];

    [self willChangeValueForKey:kConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
    [self.primitiveConstraints unionSet:values];
    // [[self primitiveValueForKey:kConstraintsKey] unionSet:values];
    [self didChangeValueForKey:kConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
}

- (void)removeConstraintsObject:(RemoteElementLayoutConstraint *)value {
    NSSet * values = [NSSet setWithObject:value];

    [self willChangeValueForKey:kConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
    [self.primitiveConstraints minusSet:values];
    // [[self primitiveValueForKey:kConstraintsKey] minusSet:values];
    [self didChangeValueForKey:kConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
}

- (void)addConstraints:(NSSet *)values {
    [self willChangeValueForKey:kConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
    [self.primitiveConstraints unionSet:values];
    // [[self primitiveValueForKey:kConstraintsKey] unionSet:values];
    [self didChangeValueForKey:kConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
}

- (void)removeConstraints:(NSSet *)values {
    [self willChangeValueForKey:kConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
    [self.primitiveConstraints minusSet:values];
    // [[self primitiveValueForKey:kConstraintsKey] minusSet:values];
    [self didChangeValueForKey:kConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
}

- (void)addFirstItemConstraintsObject:(RemoteElementLayoutConstraint *)value {
    NSSet * values = [NSSet setWithObject:value];

    [self willChangeValueForKey:kFirstItemConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
    [self.primitiveFirstItemConstraints unionSet:values];
    // [[self primitiveValueForKey:kFirstItemConstraintsKey] unionSet:values];
    [self didChangeValueForKey:kFirstItemConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
}

- (void)removeFirstItemConstraintsObject:(RemoteElementLayoutConstraint *)value {
    NSSet * values = [NSSet setWithObject:value];

    [self willChangeValueForKey:kFirstItemConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
    [self.primitiveFirstItemConstraints minusSet:values];
    // [[self primitiveValueForKey:kFirstItemConstraintsKey] minusSet:values];
    [self didChangeValueForKey:kFirstItemConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
}

- (void)addFirstItemConstraints:(NSSet *)values {
    [self willChangeValueForKey:kFirstItemConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
    [self.primitiveFirstItemConstraints unionSet:values];
    // [[self primitiveValueForKey:kFirstItemConstraintsKey] unionSet:values];
    [self didChangeValueForKey:kFirstItemConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
}

- (void)removeFirstItemConstraints:(NSSet *)values {
    [self willChangeValueForKey:kFirstItemConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
    [self.primitiveFirstItemConstraints minusSet:values];
    // [[self primitiveValueForKey:kFirstItemConstraintsKey] minusSet:values];
    [self didChangeValueForKey:kFirstItemConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
}

- (void)addSecondItemConstraintsObject:(RemoteElementLayoutConstraint *)value {
    NSSet * values = [NSSet setWithObject:value];

    [self willChangeValueForKey:kSecondItemConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
    [self.primitiveSecondItemConstraints unionSet:values];
    // [[self primitiveValueForKey:kSecondItemConstraintsKey] unionSet:values];
    [self didChangeValueForKey:kSecondItemConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
}

- (void)removeSecondItemConstraintsObject:(RemoteElementLayoutConstraint *)value {
    NSSet * values = [NSSet setWithObject:value];

    [self willChangeValueForKey:kSecondItemConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
    [self.primitiveSecondItemConstraints minusSet:values];
    // [[self primitiveValueForKey:kSecondItemConstraintsKey] minusSet:values];
    [self didChangeValueForKey:kSecondItemConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
}

- (void)addSecondItemConstraints:(NSSet *)values {
    [self willChangeValueForKey:kSecondItemConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
    [self.primitiveSecondItemConstraints unionSet:values];
    // [[self primitiveValueForKey:kSecondItemConstraintsKey] unionSet:values];
    [self didChangeValueForKey:kSecondItemConstraintsKey withSetMutation:NSKeyValueUnionSetMutation usingObjects:values];
}

- (void)removeSecondItemConstraints:(NSSet *)values {
    [self willChangeValueForKey:kSecondItemConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
    [self.primitiveSecondItemConstraints minusSet:values];
    // [[self primitiveValueForKey:kSecondItemConstraintsKey] minusSet:values];
    [self didChangeValueForKey:kSecondItemConstraintsKey withSetMutation:NSKeyValueMinusSetMutation usingObjects:values];
}

@end

/**
 * Implemented to replace the broken NSOrderedSet accessors generated by Core Data
 */
@implementation RemoteElement (SubelementsAccessors)

MSKIT_STATIC_STRING_CONST kSubelementsKey = @"subelements";

- (void)insertObject:(RemoteElement *)value inSubelementsAtIndex:(NSUInteger)idx {
    NSIndexSet * indexes = [NSIndexSet indexSetWithIndex:idx];

    [self willChange:NSKeyValueChangeInsertion valuesAtIndexes:indexes forKey:kSubelementsKey];
    [[self primitiveValueForKey:kSubelementsKey] insertObject:value atIndex:idx];
    [self didChange:NSKeyValueChangeInsertion valuesAtIndexes:indexes forKey:kSubelementsKey];
}

- (void)removeObjectFromSubelementsAtIndex:(NSUInteger)idx {
    NSIndexSet * indexes = [NSIndexSet indexSetWithIndex:idx];

    [self willChange:NSKeyValueChangeRemoval valuesAtIndexes:indexes forKey:kSubelementsKey];
    [[self primitiveValueForKey:kSubelementsKey] removeObjectAtIndex:idx];
    [self didChange:NSKeyValueChangeRemoval valuesAtIndexes:indexes forKey:kSubelementsKey];
}

- (void)insertSubelements:(NSArray *)values atIndexes:(NSIndexSet *)indexes {
    [self willChange:NSKeyValueChangeInsertion valuesAtIndexes:indexes forKey:kSubelementsKey];
    [[self primitiveValueForKey:kSubelementsKey] insertObjects:values atIndexes:indexes];
    [self didChange:NSKeyValueChangeInsertion valuesAtIndexes:indexes forKey:kSubelementsKey];
}

- (void)removeSubelementsAtIndexes:(NSIndexSet *)indexes {
    [self willChange:NSKeyValueChangeRemoval valuesAtIndexes:indexes forKey:kSubelementsKey];
    [[self primitiveValueForKey:kSubelementsKey] removeObjectsAtIndexes:indexes];
    [self didChange:NSKeyValueChangeRemoval valuesAtIndexes:indexes forKey:kSubelementsKey];
}

- (void)replaceObjectInSubelementsAtIndex:(NSUInteger)idx withObject:(RemoteElement *)value {
    NSIndexSet * indexes = [NSIndexSet indexSetWithIndex:idx];

    [self willChange:NSKeyValueChangeReplacement valuesAtIndexes:indexes forKey:kSubelementsKey];
    [self primitiveValueForKey:kSubelementsKey][idx] = value;
    [self didChange:NSKeyValueChangeReplacement valuesAtIndexes:indexes forKey:kSubelementsKey];
}

- (void)replaceSubelementsAtIndexes:(NSIndexSet *)indexes withSubelements:(NSArray *)values {
    [self willChange:NSKeyValueChangeReplacement valuesAtIndexes:indexes forKey:kSubelementsKey];
    [[self primitiveValueForKey:kSubelementsKey] replaceObjectsAtIndexes:indexes withObjects:values];
    [self didChange:NSKeyValueChangeReplacement valuesAtIndexes:indexes forKey:kSubelementsKey];
}

- (void)addSubelementsObject:(RemoteElement *)value {
    NSUInteger   idx     = [[self primitiveValueForKey:kSubelementsKey] count];
    NSIndexSet * indexes = [NSIndexSet indexSetWithIndex:idx];

    [self willChange:NSKeyValueChangeInsertion valuesAtIndexes:indexes forKey:kSubelementsKey];
    [[self primitiveValueForKey:kSubelementsKey] addObject:value];
    [self didChange:NSKeyValueChangeInsertion valuesAtIndexes:indexes forKey:kSubelementsKey];
}

- (void)removeSubelementsObject:(RemoteElement *)value {
    NSUInteger   idx = [[self primitiveValueForKey:kSubelementsKey] indexOfObject:value];

    if (idx != NSNotFound) {
        NSIndexSet * indexes = [NSIndexSet indexSetWithIndex:idx];

        [self willChange:NSKeyValueChangeRemoval valuesAtIndexes:indexes forKey:kSubelementsKey];
        [[self primitiveValueForKey:kSubelementsKey] removeObject:value];
        [self didChange:NSKeyValueChangeRemoval valuesAtIndexes:indexes forKey:kSubelementsKey];
    }
}

- (void)addSubelements:(NSOrderedSet *)values {
    NSMutableIndexSet * indexes      = [NSMutableIndexSet indexSet];
    NSUInteger          valuesCount  = [values count];
    NSUInteger          objectsCount = [[self primitiveValueForKey:kSubelementsKey] count];

    for (NSUInteger i = 0; i < valuesCount; ++i) {
        [indexes addIndex:(objectsCount + i)];
    }

    if (valuesCount > 0) {
        [self willChange:NSKeyValueChangeInsertion valuesAtIndexes:indexes forKey:kSubelementsKey];
        [[self primitiveValueForKey:kSubelementsKey] addObjectsFromArray:[values array]];
        [self didChange:NSKeyValueChangeInsertion valuesAtIndexes:indexes forKey:kSubelementsKey];
    }
}

- (void)removeSubelements:(NSOrderedSet *)values {
    NSMutableIndexSet * indexes = [NSMutableIndexSet indexSet];

    for (id value in values) {
        NSUInteger   idx = [[self primitiveValueForKey:kSubelementsKey] indexOfObject:value];

        if (idx != NSNotFound) [indexes addIndex:idx];
    }

    if ([indexes count] > 0) {
        [self willChange:NSKeyValueChangeRemoval valuesAtIndexes:indexes forKey:kSubelementsKey];
        [[self primitiveValueForKey:kSubelementsKey] removeObjectsAtIndexes:indexes];
        [self didChange:NSKeyValueChangeRemoval valuesAtIndexes:indexes forKey:kSubelementsKey];
    }
}

@end
