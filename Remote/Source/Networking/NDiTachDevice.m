//
//  NDiTachDevice.m
//  Remote
//
//  Created by Jason Cardwell on 9/4/14.
//  Copyright (c) 2014 Moondeer Studios. All rights reserved.
//

#import "NDiTachDevice.h"

static int ddLogLevel   = LOG_LEVEL_DEBUG;
static int msLogContext = LOG_CONTEXT_CONSOLE;
#pragma unused(ddLogLevel,msLogContext)

// constants
MSSTRING_CONST NDiTachDeviceMulticastGroupAddress = @"239.255.250.250";
MSSTRING_CONST NDiTachDeviceMulticastGroupPort    = @"9131";
MSSTRING_CONST NDiTachDeviceTCPPort               = @"4998";

// keys
MSSTRING_CONST NDiTachDevicePCBKey              = @"PCB_PN";
MSSTRING_CONST NDiTachDevicePkgKey              = @"Pkg_Level";
MSSTRING_CONST NDiTachDeviceSDKKey              = @"SDKClass";
MSSTRING_CONST NDiTachDeviceMakeKey             = @"Make";
MSSTRING_CONST NDiTachDeviceModelKey            = @"Model";
MSSTRING_CONST NDiTachDeviceRevisionKey         = @"Revision";
MSSTRING_CONST NDiTachDeviceStatusKey           = @"Status";
MSSTRING_CONST NDiTachDeviceConfigURLKey        = @"Config-URL";
MSSTRING_CONST NDiTachDeviceUniqueIdentifierKey = @"UUID";

@interface NDiTachDevice ()

@property (nonatomic, copy, readwrite) NSString * make;
@property (nonatomic, copy, readwrite) NSString * model;
@property (nonatomic, copy, readwrite) NSString * status;
@property (nonatomic, copy, readwrite) NSString * configURL;
@property (nonatomic, copy, readwrite) NSString * revision;
@property (nonatomic, copy, readwrite) NSString * pcb_pn;
@property (nonatomic, copy, readwrite) NSString * pkg_level;
@property (nonatomic, copy, readwrite) NSString * sdkClass;

@end

@interface NDiTachDevice (CoreDataGenerated)

@property (nonatomic) NSString * primitiveMake;
@property (nonatomic) NSString * primitiveModel;

@end


@implementation NDiTachDevice

@dynamic pcb_pn, pkg_level, sdkClass, make, model, status, configURL, revision;

/// networkDeviceForBeaconData:context:
/// @param message description
/// @param moc description
/// @return instancetype
+ (instancetype)networkDeviceFromDiscoveryBeacon:(NSString *)message context:(NSManagedObjectContext *)moc {

  static dispatch_once_t onceToken;
  static NSDictionary * index;
  dispatch_once(&onceToken, ^{
    index = @{NDiTachDeviceConfigURLKey        : @"configURL",
              NDiTachDeviceMakeKey             : @"make",
              NDiTachDeviceModelKey            : @"model",
              NDiTachDevicePCBKey              : @"pcb_pn",
              NDiTachDeviceSDKKey              : @"sdkClass",
              NDiTachDeviceStatusKey           : @"status",
              NDiTachDeviceRevisionKey         : @"revision",
              NDiTachDevicePkgKey              : @"pkg_level",
              NDiTachDeviceUniqueIdentifierKey : @"uniqueIdentifier"};
  });

  NDiTachDevice * device = nil;

  NSArray * entries = [message matchingSubstringsForRegEx:@"(?<=<-)(.*?)(?=>)"];
  MSDictionary * attributes = [MSDictionary dictionaryByParsingArray:entries separator:@"="];
  [attributes replaceKeysUsingKeyMap:index];

  NSString * uniqueIdentifier = attributes[@"uniqueIdentifier"];
  if (uniqueIdentifier) {

    device = [self findFirstByAttribute:@"uniqueIdentifier" withValue:uniqueIdentifier];
    if (!device) device = [self createInContext:moc];

    NSSet * validKeys = [[index allValues] set];
    [attributes filter:^BOOL(id<NSCopying> key, id value) { return [validKeys containsObject:key]; }];
    assert([attributes count]);

    [device setValuesForKeysWithDictionary:attributes];

  }
  
  return device;
}

/// setModel:
/// @param model description
- (void)setModel:(NSString *)model {
  [self willChangeValueForKey:@"model"];
  self.primitiveModel = model;
  [self didChangeValueForKey:@"model"];
  if (self.isNameAutoGenerated) {
    NSMutableString * name = [@"" mutableCopy];
    if (StringIsNotEmpty(self.make)) [name appendString:self.make];
    if (StringIsNotEmpty(model)) {
      if (StringIsNotEmpty(name)) [name appendString:@"-"];
      [name appendString:model];
    }
    if (StringIsNotEmpty(name)) [self setPrimitiveValue:name forKey:@"name"];
  }
}

/// setMake:
/// @param make description
- (void)setMake:(NSString *)make {
  [self willChangeValueForKey:@"make"];
  self.primitiveMake = make;
  [self didChangeValueForKey:@"make"];
  if (self.isNameAutoGenerated) {
    NSMutableString * name = [@"" mutableCopy];
    if (StringIsNotEmpty(self.model)) [name appendString:self.model];
    if (StringIsNotEmpty(make)) {
      if (StringIsNotEmpty(name)) [name appendString:@"-"];
      [name appendString:make];
    }
    if (StringIsNotEmpty(name)) [self setPrimitiveValue:name forKey:@"name"];
  }
}

/// updateWithData:
/// @param data description
- (void)updateWithData:(NSDictionary *)data {

  [super updateWithData:data];

  self.pcb_pn     = data[@"pcb_pn"];
  self.pkg_level  = data[@"pkg_level"];
  self.sdkClass   = data[@"sdk-class"];
  self.make       = data[@"make"];
  self.model      = data[@"model"];
  self.status     = data[@"status"];
  self.configURL  = data[@"config-url"];
  self.revision   = data[@"revision"];

}

/// JSONDictionary
/// @return MSDictionary *
- (MSDictionary *)JSONDictionary {

  MSDictionary * dictionary = [super JSONDictionary];

  SafeSetValueForKey(self.pcb_pn,     @"pcb_pn",      dictionary);
  SafeSetValueForKey(self.pkg_level,  @"pkg_level",   dictionary);
  SafeSetValueForKey(self.sdkClass,   @"sdk-class",   dictionary);
  SafeSetValueForKey(self.make,       @"make",        dictionary);
  SafeSetValueForKey(self.model,      @"model",       dictionary);
  SafeSetValueForKey(self.status,     @"status",      dictionary);
  SafeSetValueForKey(self.configURL,  @"configURL",   dictionary);
  SafeSetValueForKey(self.revision,   @"revision",    dictionary);

  return dictionary;

}

@end
