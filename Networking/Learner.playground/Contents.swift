//: Playground - noun: a place where people can play

import UIKit
import MoonKit

let string = "sendir,2:1,5,57339,1,1,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155,192,193,48,145,48,145,48,48,48,145,48,145,48,48,48,48,48,48,48,48,48,145,48,145,48,48,48,48,48,145,48,48,48,48,48,145,48,145,48,145,48,145,48,48,48,48,48,2155"


let chunks = ",".split(string)

let preamble = chunks[3...5]
let pairs = Array(chunks[6..<chunks.count])


var compressed = ""

var availableChars = Stack("ONMLKJIHGFEDCBA")

let p1 = map(stride(from: 0, to: pairs.count, by: 2)) { pairs[$0] }
let p2 = map(stride(from: 1, to: pairs.count, by: 2)) { pairs[$0] }

var zippedPairs = Stack(map(Swift.zip(p1, p2), {",".join([$0, $1])}))

var cycleLength = 0

if let idx = find(dropFirst(zippedPairs.array), zippedPairs.array[0]) {
  cycleLength = idx + 1
}

zippedPairs.array[cycleLength * 2]

zippedPairs.count / cycleLength

zippedPairs.reverse()
var assignedChars: [String:Character] = [:]

while let p = zippedPairs.pop() {
  if let c = assignedChars[p] {
    compressed.append(c)
  } else if let c = availableChars.pop() {
    assignedChars[p] = c
    if let lastC = last(compressed) where String(lastC) ~= "[0-9]" { compressed += "," }
    compressed += p
  }
}

//println(compressed)


