<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap12/" 
				  xmlns:sep="http://www.universal-devices.com/wsdk/isy/3.0/sep" 
				  xmlns:sepo="http://www.universal-devices.com/wsdk/isy/3.0/objects/sep"
				  xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
				  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
				  name="udi-sep" targetNamespace="http://www.universal-devices.com/wsdk/isy/3.0/sep">
	<wsdl:documentation>
		Copyright 2007-2012 Universal Devices, Inc.
		All Rights Reserved

		Web Services Flag, Objects, Parameters, Messages, and Bindings for SEP Services
	</wsdl:documentation>

	<wsdl:types>
	<!-- following is used as a workaround for VS bug -->
	<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
				xmlns:sepo="http://www.universal-devices.com/wsdk/isy/3.0/objects/sep"
				xmlns:udizb="http://www.universal-devices.com/wsdk/isy/3.0/objects/zigbee"
				targetNamespace="http://www.universal-devices.com/wsdk/isy/3.0/sep"
				elementFormDefault="unqualified">

	<xsd:import namespace="http://www.universal-devices.com/wsdk/isy/3.0/objects/sep" schemaLocation="./sepobjs.xsd"/>

	<!-- User Configuration -->
	<xsd:complexType name="UserElectricityOptions">
		<xsd:annotation>
			<xsd:documentation>
				Defines base information for user's electricity behavior.
				Configuration file URI: /CONF/ELEC.CFG
		 		See Developer's guide for saving configuration files
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="BasePrice" minOccurs="1" maxOccurs="1" type="xsd:unsignedShort">
				<xsd:annotation>
					<xsd:documentation>
		 				Electricity base price per kWh and in cents
		 			</xsd:documentation>
				</xsd:annotation>	
			</xsd:element>
			<xsd:element name="EnrollmentGroup" minOccurs="1" maxOccurs="1" type="xsd:unsignedInt">
				<xsd:annotation>
					<xsd:documentation>
		 				Utility Enrollment Group is a group by which the user categorized
		 				and enrolled in the utility program. ALL SEP events are matched
		 				against this group before being considered as valid
		 			</xsd:documentation>
				</xsd:annotation>	
			</xsd:element>
			<xsd:element name="ProviderId" minOccurs="1" maxOccurs="1" type="xsd:string">
				<xsd:annotation>
					<xsd:documentation>
						Electricity Provider ID is the string representation of the utility such as
						PJM, SDGE, PGE, etc.
		 			</xsd:documentation>
				</xsd:annotation>	
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="ISEPUserOptions" abstract="true">
		<xsd:annotation>
			<xsd:documentation>
				Defines the super class of user options for specific SEP Event 
				such as where notifications should be sent to, auto optin, etc.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="enabled" minOccurs="1" maxOccurs="1" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>
		 				Whether or not ISY should do something based on this event
		 			</xsd:documentation>
				</xsd:annotation>			
			</xsd:element>
			<xsd:element name="condition" minOccurs="1" maxOccurs="1" type="xsd:unsignedLong">
				<xsd:annotation>
					<xsd:documentation>
						See SEP
		 				The condition defines when ISY takes action when the event
		 				start running:
		 				Price: condition should be the price threshold below which ISY ignores the event
		 				DRLC: condition should be the SEPDRCriticality of the event below which ISY ignores the event
		 				Message: condition should be the SEPMessagePriority of the event below which ISY ignores the event
		 			</xsd:documentation>
				</xsd:annotation>			
			</xsd:element>
			<xsd:element name="notify" minOccurs="0" maxOccurs="1" type="xsd:boolean">
				<xsd:annotation>
					<xsd:documentation>
		 				Whether or not notifications should be sent when active and condition
		 				evaluates to true
		 			</xsd:documentation>
				</xsd:annotation>			
			</xsd:element>			
			<xsd:element name="notificationId" minOccurs="0" maxOccurs="1" type="xsd:unsignedInt">
				<xsd:annotation>
					<xsd:documentation>
		 				If notify is true, this element allows you to define the group/users
		 				to whom notifications should be sent
		 			</xsd:documentation>
				</xsd:annotation>			
			</xsd:element>	
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="SEPDRUserOptions" block="extension" final="extension">
		<xsd:annotation>
			<xsd:documentation>
		 		User options specific to DR events
		 		Configuration file URI: /CONF/EMDO.CFG
		 		See Developer's guide for saving configuration files
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="sep:ISEPUserOptions">
				<xsd:sequence>
					<xsd:element name="confirm" minOccurs="1" maxOccurs="1" type="xsd:boolean" default="false">
						<xsd:annotation>
							<xsd:documentation>
								Whether or not ISY should automatically opt in to the DR event
								when  the condition is met
							</xsd:documentation>
						</xsd:annotation>			
					</xsd:element>
					<xsd:element name="revert" minOccurs="1" maxOccurs="1" type="xsd:boolean" default="false">
						<xsd:annotation>
							<xsd:documentation>
				 				Whether or not ISY should revert HAN device settings to their 
				 				state prior to the initiation of the DR event
				 			</xsd:documentation>
						</xsd:annotation>			
					</xsd:element>						
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="SEPMessageUserOption" block="extension" final="extension">
		<xsd:annotation>
			<xsd:documentation>
		 		User options specific to Message events
		 		Configuration file URI: /CONF/EMMSO.CFG
		 		See Developer's guide for saving configuration files
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="sep:ISEPUserOptions">
				<xsd:sequence>
					<xsd:element name="confirm" minOccurs="1" maxOccurs="1" type="xsd:boolean" default="false">
						<xsd:annotation>
							<xsd:documentation>
								Whether or not ISY should automatically send a Message confirmation
								in case the condition is met AND the message requires confirmation
							</xsd:documentation>
						</xsd:annotation>			
					</xsd:element>				
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	
	<xsd:complexType name="SEPPriceUserOptions" block="extension" final="extension">
		<xsd:annotation>
			<xsd:documentation>
		 		User options specific to Price events
		 		Configuration file URI: /CONF/EMPO.CFG
		 		See Developer's guide for saving configuration files
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="sep:ISEPUserOptions">
				<xsd:sequence>
					<xsd:element name="scene" minOccurs="0" maxOccurs="1" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								The address of the scene (see Developer's Guide/Group) which should
								be activated when the condition is met
							</xsd:documentation>
						</xsd:annotation>			
					</xsd:element>
					<xsd:element name="setpointOffset" minOccurs="0" maxOccurs="1" type="xsd:unsignedShort">
						<xsd:annotation>
							<xsd:documentation>
								The setpoints by which the thermostats must be adjusted when the
								condition is met
							</xsd:documentation>
						</xsd:annotation>			
					</xsd:element>	
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>	
	
	<xsd:complexType name="SEPMeterUserOptions" block="extension" final="extension">
		<xsd:annotation>
			<xsd:documentation>
		 		User options specific to Meter events coming from the Zigbee SEP meter
		 		Configuration file URI: /CONF/EMMO.CFG
		 		See Developer's guide for saving configuration files
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="sep:ISEPUserOptions">
				<xsd:sequence>
					<xsd:element name="scene" minOccurs="0" maxOccurs="1" type="xsd:string">
						<xsd:annotation>
							<xsd:documentation>
								The address of the scene (see Developer's Guide/Group) which should
								be activated when the condition is met
							</xsd:documentation>
						</xsd:annotation>			
					</xsd:element>
					<xsd:element name="setpointOffset" minOccurs="0" maxOccurs="1" type="xsd:unsignedShort">
						<xsd:annotation>
							<xsd:documentation>
								The setpoints by which the thermostats must be adjusted when the
								condition is met
							</xsd:documentation>
						</xsd:annotation>			
					</xsd:element>	
				</xsd:sequence>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>	
	

	

	
	<xsd:complexType name="SEPDRStopObject">
		<xsd:annotation>
			<xsd:documentation>
				Stopping a DR Event.
				Please note that the event id must be one that is already active
				in ISY
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="id" minOccurs="1" maxOccurs="1" type="xsd:unsignedInt">
				<xsd:annotation>
					<xsd:documentation>
		 				The unique id which identifies an existing event
		 			</xsd:documentation>
				</xsd:annotation>				
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="reason" type="sepo:SEPDRStatus" use="required">
			<xsd:annotation>
				<xsd:documentation>
					The reason why the event stopped 
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	
	<xsd:complexType name="SEPDROptObject">
		<xsd:annotation>
			<xsd:documentation>
				Opting in and out of existing DR Events
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="id" minOccurs="1" maxOccurs="1" type="xsd:unsignedInt">
				<xsd:annotation>
					<xsd:documentation>
		 				The unique id which identifies an existing event
		 			</xsd:documentation>
				</xsd:annotation>				
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="opt" type="xsd:boolean" use="required">
			<xsd:annotation>
				<xsd:documentation>
					If true, orchestrator opts the user into the DR Event
					Otherwise, the user is opted out
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	


	
	<xsd:complexType name="SEPMessageStopObject">
		<xsd:annotation>
			<xsd:documentation>
		 		SEP Message to be stopped
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="id" minOccurs="1" maxOccurs="1" type="xsd:unsignedInt">
				<xsd:annotation>
					<xsd:documentation>
		 				The unique id which identifies this message. 
		 			</xsd:documentation>
				</xsd:annotation>				
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>	
	
	<xsd:complexType name="SEPConfirmMessageObject">
		<xsd:annotation>
			<xsd:documentation>
		 		Confirming a message
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="id" minOccurs="1" maxOccurs="1" type="xsd:unsignedInt">
				<xsd:annotation>
					<xsd:documentation>
		 				The unique id which identifies this message. 
		 			</xsd:documentation>
				</xsd:annotation>				
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>	
	
	<xsd:complexType name="SEPStopPriceObject">
		<xsd:annotation>
			<xsd:documentation>
		 		Stop an active price	
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="id" minOccurs="1" maxOccurs="1" type="xsd:unsignedInt">
				<xsd:annotation>
					<xsd:documentation>
		 				The unique id which identifies this message
		 			</xsd:documentation>
				</xsd:annotation>				
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	
	<xsd:complexType name="SEPCancelAllObject">
		<xsd:annotation>
			<xsd:documentation>
		 		Cancellation for all events pending or active regardless of
		 		the event id	
		 	</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="enrollmentGroup" minOccurs="1" maxOccurs="1" type="xsd:unsignedInt">
				<xsd:annotation>
					<xsd:documentation>
		 				Enrollment Group defines the systems for which an event
		 				is applicable
		 			</xsd:documentation>
				</xsd:annotation>				
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	

	<!-- Message Types -->
	<xsd:complexType name="Empty"/>
	<xsd:complexType name="UDIDefaultResponse">
		<xsd:sequence>
			<xsd:element name="status" minOccurs="1" maxOccurs="1" type="xsd:string"/>
			<xsd:element name="info" minOccurs="0" maxOccurs="1" type="xsd:string"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- Services -->
	<xsd:element name="SEPStartDREvent" type="sepo:SEPDRObject"/>
	<xsd:element name="SEPStopDREvent" type="sep:SEPDRStopObject"/>
	<xsd:element name="SEPDROpt" type="sep:SEPDROptObject"/>
	
	<xsd:element name="SEPStartMessage" type="sepo:SEPMessageObject"/>
	<xsd:element name="SEPStopMessage" type="sep:SEPMessageStopObject"/>
	<xsd:element name="SEPConfirmMessage" type="sep:SEPConfirmMessageObject"/>
	
	<xsd:element name="SEPStartPrice" type="sepo:SEPPriceObject"/>
	<xsd:element name="SEPStopPrice" type="sep:SEPStopPriceObject"/>
	
	<xsd:element name="SEPCancelAllDREvents" type="sep:SEPCancelAllObject"/>
	<xsd:element name="SEPCancelAllPriceEvents" type="sep:SEPCancelAllObject"/>
	<xsd:element name="SEPCancelAllMessageEvents" type="sep:SEPCancelAllObject"/>
	
	<xsd:element name="UDIDefaultRespnse" type="sep:UDIDefaultResponse"/>
	
	</xsd:schema>
	</wsdl:types>


	<!-- MESSAGES -->
	<wsdl:message name="DefaultResponseMessage">
		<wsdl:part name="response" element="sep:UDIDefaultRespnse"/>
	</wsdl:message>
	
	<wsdl:message name="SEPStartDREventRequest">
		<wsdl:documentation>Starts a DR event.</wsdl:documentation>
		<wsdl:part name="SEPStartDREvent" element="sep:SEPStartDREvent"/>
	</wsdl:message>
	
	<wsdl:message name="SEPStopDREventRequest">
		<wsdl:documentation>Stops a DR event.</wsdl:documentation>
		<wsdl:part name="SEPStopDREvent" element="sep:SEPStopDREvent"/>
	</wsdl:message>

	<wsdl:message name="SEPDROptRequest">
		<wsdl:documentation>Opts in or out of a valid DR event.</wsdl:documentation>
		<wsdl:part name="SEPDROpt" element="sep:SEPDROpt"/>
	</wsdl:message>
	
	<wsdl:message name="SEPStartMessageRequest">
		<wsdl:documentation>Starts a message event.</wsdl:documentation>
		<wsdl:part name="SEPStartMessage" element="sep:SEPStartMessage"/>
	</wsdl:message>
	
	<wsdl:message name="SEPStopMessageRequest">
		<wsdl:documentation>Stops a message event.</wsdl:documentation>
		<wsdl:part name="SEPStopMessage" element="sep:SEPStopMessage"/>
	</wsdl:message>
	
	<wsdl:message name="SEPConfirmMessageRequest">
		<wsdl:documentation>Sends confirmation for a valid message that requires confirmation.</wsdl:documentation>
		<wsdl:part name="SEPConfirmMessage" element="sep:SEPConfirmMessage"/>
	</wsdl:message>
	
	<wsdl:message name="SEPStartPriceRequest">
		<wsdl:documentation>Starts a price event.</wsdl:documentation>
		<wsdl:part name="SEPStartPrice" element="sep:SEPStartPrice"/>
	</wsdl:message>
	
	<wsdl:message name="SEPStopPriceRequest">
		<wsdl:documentation>Stops a price event.</wsdl:documentation>
		<wsdl:part name="SEPStopPrie" element="sep:SEPStopPrice"/>
	</wsdl:message>
	
	<wsdl:message name="SEPCancelAllDREventsRequest">
		<wsdl:documentation>Cancels all existing DR events.</wsdl:documentation>
		<wsdl:part name="SEPCancelAllDREvents" element="sep:SEPCancelAllDREvents"/>
	</wsdl:message>
	
	<wsdl:message name="SEPCancelAllPriceEventsRequest">
		<wsdl:documentation>Cancels all existing price events.</wsdl:documentation>
		<wsdl:part name="SEPCancelAllPriceEvents" element="sep:SEPCancelAllPriceEvents"/>
	</wsdl:message>
	
	<wsdl:message name="SEPCancelAllMessageEventsRequest">
		<wsdl:documentation>Cancels all existing message events.</wsdl:documentation>
		<wsdl:part name="SEPCancelAllMessageEvents" element="sep:SEPCancelAllMessageEvents"/>
	</wsdl:message>
	
	<wsdl:portType name="UDISEPServices_PortType">
		<wsdl:operation name="SEPStartDREvent">
			<wsdl:input message="sep:SEPStartDREventRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		<wsdl:operation name="SEPStopDREvent">
			<wsdl:input message="sep:SEPStopDREventRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		<wsdl:operation name="SEPDROpt">
			<wsdl:input message="sep:SEPDROptRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		
		<wsdl:operation name="SEPStartMessage">
			<wsdl:input message="sep:SEPStartMessageRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		<wsdl:operation name="SEPStopMessage">
			<wsdl:input message="sep:SEPStopMessageRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		<wsdl:operation name="SEPConfirmMessage">
			<wsdl:input message="sep:SEPConfirmMessageRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		
		<wsdl:operation name="SEPStartPrice">
			<wsdl:input message="sep:SEPStartPriceRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		<wsdl:operation name="SEPStopPrice">
			<wsdl:input message="sep:SEPStopPriceRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		
		<wsdl:operation name="SEPCancelAllDREvents">
			<wsdl:input message="sep:SEPCancelAllDREventsRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		
		<wsdl:operation name="SEPCancelAllPriceEvents">
			<wsdl:input message="sep:SEPCancelAllPriceEventsRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>
		
		<wsdl:operation name="SEPCancelAllMessageEvents">
			<wsdl:input message="sep:SEPCancelAllMessageEventsRequest"/>
			<wsdl:output message="sep:DefaultResponseMessage"/>
		</wsdl:operation>	

	</wsdl:portType>

	<wsdl:binding name="UDISEPServices_Binding" type="sep:UDISEPServices_PortType">
		<wsdl:documentation>UDI Binding binds the concrete Port (UDI SEP Services) to the Abstract Port Type (UDISEPServices_PortType)</wsdl:documentation>
		<soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>

		<wsdl:operation name="SEPStartDREvent">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		
		<wsdl:operation name="SEPStopDREvent">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>	
		
		<wsdl:operation name="SEPDROpt">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>	
		
		<wsdl:operation name="SEPStartMessage">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		
		<wsdl:operation name="SEPStopMessage">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>	
		
		<wsdl:operation name="SEPConfirmMessage">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		
		<wsdl:operation name="SEPStartPrice">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		
		<wsdl:operation name="SEPStopPrice">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>
		
		<wsdl:operation name="SEPCancelAllDREvents">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>	
		
		<wsdl:operation name="SEPCancelAllPriceEvents">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>	
		
		<wsdl:operation name="SEPCancelAllMessageEvents">
			<soap:operation style="document"/>
			<wsdl:input>
				<soap:body use="literal"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal"/>
			</wsdl:output>
		</wsdl:operation>	

	</wsdl:binding>
</wsdl:definitions>
